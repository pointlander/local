{
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Mashery Local Admin APIs",
    "title": "Mashery Local API",
    "version": "5.3.0"
  },
  "basePath": "/api",
  "paths": {
    "/api/cc/api-responsefilters": {
      "get": {
        "tags": [
          "api-responsefilters"
        ],
        "summary": "get all api definition endpoints methods response filters.",
        "operationId": "getAllResponseFilters",
        "responses": {
          "200": {
            "$ref": "#/responses/APIResponseFiltersResp"
          },
          "500": {
            "$ref": "#/responses/internal"
          }
        }
      }
    },
    "/cc/api-definitions": {
      "get": {
        "tags": [
          "api-definitions"
        ],
        "summary": "List API Definitions.",
        "operationId": "getApiDefinitions",
        "responses": {
          "200": {
            "$ref": "#/responses/APIDefinitionsResp"
          },
          "500": {
            "$ref": "#/responses/internal"
          }
        }
      },
      "post": {
        "tags": [
          "api-definitions"
        ],
        "summary": "Create new api definition.",
        "operationId": "createApiDefinition",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/APIDefinition"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIDefinitionResp"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      }
    },
    "/cc/api-definitions/{api_definition_id}/api-endpoints": {
      "get": {
        "tags": [
          "api-definitions-endpoints"
        ],
        "summary": "get api definition endpoints.",
        "operationId": "getApiEndPoints",
        "parameters": [
          {
            "type": "string",
            "description": "id created from api definition",
            "name": "api_definition_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/apiEndpointsResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      },
      "post": {
        "tags": [
          "api-definitions-endpoints"
        ],
        "summary": "create api endpoint.",
        "operationId": "createApiEndPoint",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIEndpoint"
            }
          },
          {
            "type": "string",
            "description": "id of api definition",
            "name": "api_definition_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/apiEndpointResp"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      }
    },
    "/cc/api-definitions/{api_definition_id}/api-endpoints/{endpoint_id}/api-methods": {
      "get": {
        "tags": [
          "api-methods"
        ],
        "summary": "get api definition endpoints api methods.",
        "operationId": "getAPIMethods",
        "parameters": [
          {
            "type": "string",
            "description": "id created from api definition",
            "name": "api_definition_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of api-definition-endpoint",
            "name": "endpoint_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIMethodsResp"
          },
          "500": {
            "$ref": "#/responses/internal"
          }
        }
      },
      "post": {
        "tags": [
          "api-methods"
        ],
        "summary": "create api definition endpoints api methods.",
        "operationId": "createAPIMethod",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIMethod"
            }
          },
          {
            "type": "string",
            "description": "id created from api definition",
            "name": "api_definition_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of api-definition-endpoint",
            "name": "endpoint_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIMethodResp"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      }
    },
    "/cc/api-definitions/{api_definition_id}/api-endpoints/{endpoint_id}/api-methods/{id}": {
      "get": {
        "tags": [
          "api-methods"
        ],
        "summary": "get api definition endpoints api method.",
        "operationId": "getAPIMethod",
        "parameters": [
          {
            "type": "string",
            "description": "id created from api definition",
            "name": "api_definition_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of api-definition-endpoint",
            "name": "endpoint_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of api-definition-endpoint api method",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIMethodResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      },
      "put": {
        "tags": [
          "api-methods"
        ],
        "summary": "update api definition endpoints api methods.",
        "operationId": "updateAPIMethod",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIMethod"
            }
          },
          {
            "type": "string",
            "description": "id created from api definition",
            "name": "api_definition_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of api-definition-endpoint",
            "name": "endpoint_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of api-definition-endpoint api method",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIMethodResp"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      },
      "delete": {
        "tags": [
          "api-methods"
        ],
        "summary": "delete api definition endpoints api methods.",
        "operationId": "deleteAPIMethod",
        "parameters": [
          {
            "type": "string",
            "description": "id created from api definition",
            "name": "api_definition_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of api-definition-endpoint",
            "name": "endpoint_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of api-definition-endpoint api method",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/noContent"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      }
    },
    "/cc/api-definitions/{api_definition_id}/api-endpoints/{endpoint_id}/api-methods/{method_id}/api-response-filters/{id}": {
      "get": {
        "tags": [
          "api-responsefilters"
        ],
        "summary": "get api definition endpoints methods response filters.",
        "operationId": "getAPIResponseFilter",
        "parameters": [
          {
            "type": "string",
            "description": "id created from api definition",
            "name": "api_definition_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of api-definition-endpoint",
            "name": "endpoint_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of api-definition-endpoint method",
            "name": "method_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of api-definition-endpoint method filter",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIResponseFilterResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/cc/api-definitions/{api_definition_id}/api-endpoints/{endpoint_id}/api-methods/{method_id}/api-responsefilters": {
      "get": {
        "tags": [
          "api-responsefilters"
        ],
        "summary": "get api definition endpoints methods response filters.",
        "operationId": "getAPIResponseFilters",
        "parameters": [
          {
            "type": "string",
            "description": "id created from api definition",
            "name": "api_definition_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of api-definition-endpoint",
            "name": "endpoint_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of api-definition-endpoint method",
            "name": "method_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIResponseFiltersResp"
          },
          "500": {
            "$ref": "#/responses/internal"
          }
        }
      },
      "post": {
        "tags": [
          "api-responsefilters"
        ],
        "summary": "create api definition endpoints methods response filters.",
        "operationId": "createAPIResponseFilters",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIResponseFilter"
            }
          },
          {
            "type": "string",
            "description": "id created from api definition",
            "name": "api_definition_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of api-definition-endpoint",
            "name": "endpoint_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of api-definition-endpoint method",
            "name": "method_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIResponseFilterResp"
          },
          "500": {
            "$ref": "#/responses/internal"
          }
        }
      }
    },
    "/cc/api-definitions/{api_definition_id}/api-endpoints/{endpoint_id}/api-methods/{method_id}/api-responsefilters/{id}": {
      "put": {
        "tags": [
          "api-responsefilters"
        ],
        "summary": "update api definition endpoints methods response filters.",
        "operationId": "updateAPIResponseFilter",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIResponseFilter"
            }
          },
          {
            "type": "string",
            "description": "id created from api definition",
            "name": "api_definition_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of api-definition-endpoint",
            "name": "endpoint_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of api-definition-endpoint method",
            "name": "method_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of api-definition-endpoint method filter",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIResponseFilterResp"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      },
      "delete": {
        "tags": [
          "api-responsefilters"
        ],
        "summary": "delete api definition endpoints methods response filters.",
        "operationId": "deleteAPIResponseFilter",
        "parameters": [
          {
            "type": "string",
            "description": "id created from api definition",
            "name": "api_definition_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of api-definition-endpoint",
            "name": "endpoint_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of api-definition-endpoint method",
            "name": "method_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of api-definition-endpoint method filter",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/noContent"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      }
    },
    "/cc/api-definitions/{api_definition_id}/api-endpoints/{endpoint_id}/api-schedule-maintenance": {
      "get": {
        "tags": [
          "apiendpoint-schedule-maintenance"
        ],
        "summary": "get api definition endpoint schedule maintenance.",
        "operationId": "getAPIEndpointScheduledMaintenanceEvent",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIEndpointScheduledMaintenanceEvent"
            }
          },
          {
            "type": "string",
            "description": "id created from api definition",
            "name": "api_definition_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of api-definition-endpoint",
            "name": "endpoint_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIEndpointScheduledMaintenanceEventResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      },
      "post": {
        "tags": [
          "apiendpoint-schedule-maintenance"
        ],
        "summary": "create api definition endpoint schedule maintenance.",
        "operationId": "createAPIEndpointScheduledMaintenanceEvent",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIEndpointScheduledMaintenanceEvent"
            }
          },
          {
            "type": "string",
            "description": "id created from api definition",
            "name": "api_definition_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of api-definition-endpoint",
            "name": "endpoint_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIEndpointScheduledMaintenanceEventResp"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      }
    },
    "/cc/api-definitions/{api_definition_id}/api-endpoints/{id}": {
      "get": {
        "tags": [
          "api-definitions-endpoints"
        ],
        "summary": "get api definition endpoints.",
        "operationId": "getAPIEndpoint",
        "parameters": [
          {
            "type": "string",
            "description": "id created from api definition",
            "name": "api_definition_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of api-definition",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/apiEndpointResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      },
      "put": {
        "tags": [
          "api-definitions-endpoints"
        ],
        "summary": "put api definition endpoints.",
        "operationId": "updateAPIEndpoint",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIEndpoint"
            }
          },
          {
            "type": "string",
            "description": "id created from api definition",
            "name": "api_definition_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of api-definition-endpoint",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/apiEndpointResp"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      },
      "delete": {
        "tags": [
          "api-definitions-endpoints"
        ],
        "summary": "delete api definition endpoints.",
        "operationId": "deleteAPIEndpoint",
        "parameters": [
          {
            "type": "string",
            "description": "id created from api definition",
            "name": "api_definition_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of api-definition-endpoint",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/noContent"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      }
    },
    "/cc/api-definitions/{api_definition_id}/api-endpoints/{id}/call-transformation": {
      "get": {
        "tags": [
          "api-definitions-endpoints"
        ],
        "summary": "get api definition endpoints call-transformation.",
        "operationId": "getAPIEndpointCallTransformation",
        "parameters": [
          {
            "type": "string",
            "description": "id created from api definition",
            "name": "api_definition_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of api-definition-endpoint",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIEndpointCallTransformationResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      },
      "put": {
        "tags": [
          "api-definitions-endpoints"
        ],
        "summary": "update api endpoint call-transformation.",
        "operationId": "updateAPIEndpointCallTransformation",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIEndpointCallTransformation"
            }
          },
          {
            "type": "string",
            "description": "id created from api definition",
            "name": "api_definition_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of api-definition-endpoint",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIEndpointCallTransformationResp"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      }
    },
    "/cc/api-definitions/{api_definition_id}/api-endpoints/{id}/cors": {
      "get": {
        "tags": [
          "api-definitions-endpoints"
        ],
        "summary": "get api definition endpoints cors.",
        "operationId": "getAPIEndpointCORS",
        "parameters": [
          {
            "type": "string",
            "description": "id created from api definition",
            "name": "api_definition_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of api-definition-endpoint",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIEndpointCORSResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      },
      "put": {
        "tags": [
          "api-definitions-endpoints"
        ],
        "summary": "update api endpoint cors.",
        "operationId": "updateAPIEndpointCORS",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIEndpointCORS"
            }
          },
          {
            "type": "string",
            "description": "id created from api definition",
            "name": "api_definition_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of api-definition-endpoint",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIEndpointCORSResp"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      },
      "post": {
        "tags": [
          "api-definitions-endpoints"
        ],
        "summary": "create api endpoint cors.",
        "operationId": "createAPIEndpointCORS",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIEndpointCORS"
            }
          },
          {
            "type": "string",
            "description": "id created from api definition",
            "name": "api_definition_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of api-definition-endpoint",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIEndpointCORSResp"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      }
    },
    "/cc/api-definitions/{api_definition_id}/api-endpoints/{id}/detection": {
      "get": {
        "tags": [
          "api-definitions-endpoints"
        ],
        "summary": "get api definition endpoints detection.",
        "operationId": "getAPIEndpointDetection",
        "parameters": [
          {
            "type": "string",
            "description": "id created from api definition",
            "name": "api_definition_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of api-definition-endpoint",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIEndpointDetectionResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      },
      "put": {
        "tags": [
          "api-definitions-endpoints"
        ],
        "summary": "put api definition endpoints detection.",
        "operationId": "updateApiEndPointDetection",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIEndpointDetection"
            }
          },
          {
            "type": "string",
            "description": "id created from api definition",
            "name": "api_definition_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of api-definition-endpoint",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIEndpointDetectionResp"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      }
    },
    "/cc/api-definitions/{api_definition_id}/api-endpoints/{id}/more": {
      "get": {
        "tags": [
          "api-definitions-endpoints"
        ],
        "summary": "get api definition endpoints more.",
        "operationId": "getAPIEndpointMore",
        "parameters": [
          {
            "type": "string",
            "description": "id created from api definition",
            "name": "api_definition_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of api-definition-endpoint",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIEndpointMoreResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      },
      "put": {
        "tags": [
          "api-definitions-endpoints"
        ],
        "summary": "update api endpoint more.",
        "operationId": "updateAPIEndpointMore",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIEndpointMore"
            }
          },
          {
            "type": "string",
            "description": "id created from api definition",
            "name": "api_definition_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of api-definition-endpoint",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIEndpointMoreResp"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      }
    },
    "/cc/api-definitions/{api_definition_id}/api-endpoints/{id}/performance-acceleration": {
      "get": {
        "tags": [
          "api-definitions-endpoints"
        ],
        "summary": "get api definition endpoints performance-acceleration.",
        "operationId": "getAPIEndpointPerformanceAcceleration",
        "parameters": [
          {
            "type": "string",
            "description": "id created from api definition",
            "name": "api_definition_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of api-definition-endpoint",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIEndpointPerformanceAccelerationResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      },
      "put": {
        "tags": [
          "api-definitions-endpoints"
        ],
        "summary": "put api definition endpoints performance-acceleration.",
        "operationId": "updateAPIEndpointPerformanceAcceleration",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIEndpointPerformanceAcceleration"
            }
          },
          {
            "type": "string",
            "description": "id created from api definition",
            "name": "api_definition_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of api-definition-endpoint",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIEndpointPerformanceAccelerationResp"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      }
    },
    "/cc/api-definitions/{api_definition_id}/api-endpoints/{id}/security": {
      "get": {
        "tags": [
          "api-definitions-endpoints"
        ],
        "summary": "get api definition endpoints security.",
        "operationId": "getAPIEndpointSecurity",
        "parameters": [
          {
            "type": "string",
            "description": "id created from api definition",
            "name": "api_definition_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of api-definition-endpoint",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIEndpointSecurityResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      },
      "put": {
        "tags": [
          "api-definitions-endpoints"
        ],
        "summary": "put api definition endpoints security.",
        "operationId": "updateApiEndPointSecurity",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIEndpointSecurity"
            }
          },
          {
            "type": "string",
            "description": "id created from api definition",
            "name": "api_definition_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of api-definition-endpoint",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIEndpointSecurityResp"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      }
    },
    "/cc/api-definitions/{api_definition_id}/api-errorsets": {
      "get": {
        "tags": [
          "api-errorset"
        ],
        "summary": "get api definition error sets.",
        "operationId": "getAPIErrorSets",
        "parameters": [
          {
            "type": "string",
            "description": "id created from api definition",
            "name": "api_definition_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIErrorSetsResp"
          },
          "500": {
            "$ref": "#/responses/internal"
          }
        }
      },
      "post": {
        "tags": [
          "api-errorset"
        ],
        "summary": "create api definition endpoints error set.",
        "operationId": "createAPIErrorSet",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIErrorSet"
            }
          },
          {
            "type": "string",
            "description": "id created from api definition",
            "name": "api_definition_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIErrorSetResp"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      }
    },
    "/cc/api-definitions/{api_definition_id}/api-errorsets/{api_errorset_id}/api-errormessages": {
      "get": {
        "tags": [
          "api-errormessages"
        ],
        "summary": "get api definition errorset error messages.",
        "operationId": "getAPIErrorMessages",
        "parameters": [
          {
            "type": "string",
            "description": "id created from api definition",
            "name": "api_definition_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of api-definition errorset",
            "name": "api_errorset_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIErrorMessagesResp"
          },
          "404": {
            "$ref": "#/responses/internal"
          }
        }
      }
    },
    "/cc/api-definitions/{api_definition_id}/api-errorsets/{api_errorset_id}/api-errormessages/{id}": {
      "get": {
        "tags": [
          "api-errormessages"
        ],
        "summary": "get api definition errorset error messages of an id.",
        "operationId": "getAPIErrorMessage",
        "parameters": [
          {
            "type": "string",
            "description": "id created from api definition",
            "name": "api_definition_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of api-definition errorset",
            "name": "api_errorset_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of api-definition errorset error message",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIErrorMessageResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      },
      "put": {
        "tags": [
          "api-errormessages"
        ],
        "summary": "update api definition errorset error messages of an id.",
        "operationId": "updateAPIErrorMessage",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIErrorMessage"
            }
          },
          {
            "type": "string",
            "description": "id created from api definition",
            "name": "api_definition_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of api-definition errorset",
            "name": "api_errorset_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of api-definition errorset error message",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIErrorMessageResp"
          },
          "404": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      }
    },
    "/cc/api-definitions/{api_definition_id}/api-errorsets/{id}": {
      "get": {
        "tags": [
          "api-errorset"
        ],
        "summary": "get api definition of an errorset .",
        "operationId": "getAPIErrorSet",
        "parameters": [
          {
            "type": "string",
            "description": "id created from api definition",
            "name": "api_definition_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of api-definition errorset",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIErrorSetResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      },
      "put": {
        "tags": [
          "api-errorset"
        ],
        "summary": "update api definition error set.",
        "operationId": "updateAPIErrorSet",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIErrorSet"
            }
          },
          {
            "type": "string",
            "description": "id created from api definition",
            "name": "api_definition_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of api-definition errorset",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIErrorSetResp"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      },
      "delete": {
        "tags": [
          "api-errorset"
        ],
        "summary": "delete api definition error set.",
        "operationId": "deleteAPIErrorSet",
        "parameters": [
          {
            "type": "string",
            "description": "id created from api definition",
            "name": "api_definition_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of api-definition error set",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/noContent"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      }
    },
    "/cc/api-definitions/{id}": {
      "get": {
        "tags": [
          "api-definitions"
        ],
        "summary": "get api definition.",
        "operationId": "GetApiDefinition",
        "parameters": [
          {
            "type": "string",
            "description": "id of api-definition",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIDefinitionResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      },
      "put": {
        "tags": [
          "api-definitions"
        ],
        "summary": "update api definition.",
        "operationId": "UpdateApiDefinition",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIDefinition"
            }
          },
          {
            "type": "string",
            "description": "id of api definition",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIDefinitionResp"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      },
      "delete": {
        "tags": [
          "api-definitions"
        ],
        "summary": "delete api definition.",
        "operationId": "deleteApiDefinition",
        "parameters": [
          {
            "type": "string",
            "description": "id of api definition",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/noContent"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      }
    },
    "/cc/api-definitions/{id}/performance-acceleration": {
      "get": {
        "tags": [
          "api-definitions-performance"
        ],
        "summary": "get api definition performance-acceleration.",
        "operationId": "getAPIDefinitionPerformanceAcceleration",
        "parameters": [
          {
            "type": "string",
            "description": "id of api definition",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIDefinitionPerformanceAccelerationResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      },
      "put": {
        "tags": [
          "api-definitions-performance"
        ],
        "summary": "update api definition performance-acceleration.",
        "operationId": "updateAPIDefinitionPerformanceAcceleration",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIDefinitionPerformanceAcceleration"
            }
          },
          {
            "type": "string",
            "description": "id of api definition",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIDefinitionPerformanceAccelerationResp"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      }
    },
    "/cc/api-definitions/{id}/security": {
      "get": {
        "tags": [
          "api-definitions-security"
        ],
        "summary": "get api definition security.",
        "operationId": "getApiDefinitionSecurity",
        "parameters": [
          {
            "type": "string",
            "description": "uuid of api-definition",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIDefinitionSecurityResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      },
      "put": {
        "tags": [
          "api-definitions-security"
        ],
        "summary": "update api definition security.",
        "operationId": "updateApiDefinitionSecurity",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIDefinitionSecurity"
            }
          },
          {
            "type": "string",
            "description": "id of api definition",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIDefinitionSecurityResp"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      }
    },
    "/cc/api-domains": {
      "get": {
        "tags": [
          "api-domains"
        ],
        "summary": "get api domain.",
        "operationId": "getAPIDomains",
        "responses": {
          "200": {
            "$ref": "#/responses/APIDomainsResp"
          },
          "500": {
            "$ref": "#/responses/internal"
          }
        }
      },
      "post": {
        "tags": [
          "api-domains"
        ],
        "summary": "create api domain.",
        "operationId": "createAPIDomain",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIDomain"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIDomainResp"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      }
    },
    "/cc/api-domains/{id}": {
      "get": {
        "tags": [
          "api-domains"
        ],
        "summary": "get api domain .",
        "operationId": "getAPIDomain",
        "parameters": [
          {
            "type": "string",
            "description": "id of api domain",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIDomainResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      },
      "delete": {
        "tags": [
          "api-domains"
        ],
        "summary": "delete api domain.",
        "operationId": "deleteAPIDomain",
        "parameters": [
          {
            "type": "string",
            "description": "id of api domain",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/noContent"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      }
    },
    "/cc/api-email-templatesets": {
      "get": {
        "summary": "List emailtemplate sets.",
        "operationId": "getAPIEmailTemplatessSet",
        "responses": {
          "200": {
            "$ref": "#/responses/APIEmailTemplateSetsResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      },
      "post": {
        "tags": [
          "api-emailtemplate-sets"
        ],
        "summary": "create api email template set.",
        "operationId": "createAPIEmailTemplatesSet",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/APIEmailTemplateSet"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIEmailTemplateSetResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/cc/api-email-templatesets/{email_template_set_id}/templates": {
      "get": {
        "summary": "List emailtemplates.",
        "operationId": "getAPIEmailTemplates",
        "parameters": [
          {
            "type": "string",
            "description": "id of api email template-sets",
            "name": "email_template_set_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIEmailTemplatesResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/cc/api-email-templatesets/{email_template_set_id}/templates/{id}": {
      "get": {
        "tags": [
          "api-emailtemplates"
        ],
        "summary": "get api email template.",
        "operationId": "getAPIEmailTemplate",
        "parameters": [
          {
            "type": "string",
            "description": "id of api email template-sets",
            "name": "email_template_set_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of api email template",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIEmailTemplateResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      },
      "put": {
        "tags": [
          "api-emailtemplates"
        ],
        "summary": "update api email template",
        "operationId": "updateAPIEmailTemplates",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIEmailTemplate"
            }
          },
          {
            "type": "string",
            "description": "id of api email template-sets",
            "name": "email_template_set_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of api email template",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIEmailTemplateResp"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      }
    },
    "/cc/api-email-templatesets/{id}": {
      "get": {
        "tags": [
          "api-emailtemplate-sets"
        ],
        "summary": "get api email template set.",
        "operationId": "getAPIEmailTemplatesSet",
        "parameters": [
          {
            "type": "string",
            "description": "id of api email template set",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIEmailTemplateSetResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      },
      "put": {
        "tags": [
          "api-emailtemplate-sets"
        ],
        "summary": "update api email template set",
        "operationId": "updateAPIEmailTemplatesSet",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIEmailTemplateSet"
            }
          },
          {
            "type": "string",
            "description": "id of api email template set",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIEmailTemplateSetResp"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      },
      "delete": {
        "tags": [
          "api-emailtemplate-sets"
        ],
        "summary": "delete api email template set.",
        "operationId": "deleteAPIEmailTemplatesSet",
        "parameters": [
          {
            "type": "string",
            "description": "id of api email template set",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/noContent"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      }
    },
    "/cc/api-https-client-identities": {
      "get": {
        "tags": [
          "api-https-client-profiles"
        ],
        "summary": "get api http client identities.",
        "operationId": "getAPIIdentities",
        "responses": {
          "200": {
            "$ref": "#/responses/APIIdentitiesResp"
          },
          "500": {
            "$ref": "#/responses/internal"
          }
        }
      }
    },
    "/cc/api-https-client-identities/{id}": {
      "get": {
        "tags": [
          "api-https-client-profiles"
        ],
        "summary": "get api http client identity.",
        "operationId": "getAPIIdentity",
        "parameters": [
          {
            "type": "string",
            "description": "id of api https-client-profiles",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIIdentityResp"
          },
          "500": {
            "$ref": "#/responses/internal"
          }
        }
      }
    },
    "/cc/api-https-client-profiles": {
      "get": {
        "tags": [
          "api-https-client-profiles"
        ],
        "summary": "get api http client profiles.",
        "operationId": "getAPIHTTPSClientProfiles",
        "responses": {
          "200": {
            "$ref": "#/responses/APIHTTPSClientProfilesResp"
          },
          "500": {
            "$ref": "#/responses/internal"
          }
        }
      },
      "post": {
        "tags": [
          "api-https-client-profiles"
        ],
        "summary": "create api http client profile.",
        "operationId": "createAPIHTTPSClientProfile",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIHTTPSClientProfile"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIHTTPSClientProfileResp"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      }
    },
    "/cc/api-https-client-profiles/{id}": {
      "get": {
        "tags": [
          "api-https-client-profiles"
        ],
        "summary": "get api-https-client-profiles .",
        "operationId": "getAPIHTTPSClientProfile",
        "parameters": [
          {
            "type": "string",
            "description": "id of api-https-client-profiles",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIHTTPSClientProfileResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      },
      "put": {
        "tags": [
          "api-https-client-profiles"
        ],
        "summary": "update api https-client-profiles.",
        "operationId": "updateAPIHTTPSClientProfile",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIHTTPSClientProfile"
            }
          },
          {
            "type": "string",
            "description": "id of api https-client-profiles",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIHTTPSClientProfileResp"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      },
      "delete": {
        "tags": [
          "api-https-client-profiles"
        ],
        "summary": "delete api-https-client-profiles.",
        "operationId": "deleteAPIHTTPSClientProfile",
        "parameters": [
          {
            "type": "string",
            "description": "id of api-https-client-profiles",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/noContent"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      }
    },
    "/cc/api-https-client-trusts": {
      "get": {
        "tags": [
          "api-https-client-profiles"
        ],
        "summary": "get api http client trusts.",
        "operationId": "getAPIClientTrustCertificates",
        "responses": {
          "200": {
            "$ref": "#/responses/APIClientTrustCertificatesResp"
          },
          "500": {
            "$ref": "#/responses/internal"
          }
        }
      }
    },
    "/cc/api-https-client-trusts/{id}": {
      "get": {
        "tags": [
          "api-https-client-profiles"
        ],
        "summary": "get api http client trust.",
        "operationId": "getAPIClientTrustCertificate",
        "parameters": [
          {
            "type": "string",
            "description": "id of api https-client-profiles",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIClientTrustCertificateResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/cc/api-interactivedocs": {
      "get": {
        "tags": [
          "api-interactivedocs"
        ],
        "summary": "get interactivedocs.",
        "operationId": "getAPIInteractiveDocs",
        "responses": {
          "200": {
            "$ref": "#/responses/APIInteractiveDocsResp"
          },
          "500": {
            "$ref": "#/responses/internal"
          }
        }
      },
      "post": {
        "tags": [
          "api-interactivedocs"
        ],
        "summary": "create interactivedocs.",
        "operationId": "createAPIInteractiveDocs",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIInteractiveDoc"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIInteractiveDocResp"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      }
    },
    "/cc/api-interactivedocs/{id}": {
      "get": {
        "tags": [
          "api-interactivedocs"
        ],
        "summary": "get APIInteractiveDoc.",
        "operationId": "getAPIInteractiveDoc",
        "parameters": [
          {
            "type": "string",
            "description": "uuID of APIInteractiveDoc",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIInteractiveDocResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      },
      "put": {
        "tags": [
          "api-interactivedocs"
        ],
        "summary": "update APIInteractiveDoc.",
        "operationId": "updateAPIInteractiveDoc",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIInteractiveDoc"
            }
          },
          {
            "type": "string",
            "description": "id of interactive doc",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIInteractiveDocResp"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      },
      "delete": {
        "tags": [
          "api-interactivedocs"
        ],
        "summary": "delete APIInteractiveDoc.",
        "operationId": "deleteAPIInteractiveDoc",
        "parameters": [
          {
            "type": "string",
            "description": "id of APIInteractiveDoc",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/noContent"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      }
    },
    "/cc/api-organizations": {
      "get": {
        "tags": [
          "api-organizations"
        ],
        "summary": "get api organizations.",
        "operationId": "getAPIOrganizations",
        "responses": {
          "200": {
            "$ref": "#/responses/APIOrganizationsResp"
          },
          "500": {
            "$ref": "#/responses/internal"
          }
        }
      },
      "post": {
        "tags": [
          "api-organizations"
        ],
        "summary": "create api organization.",
        "operationId": "createAPIOrganization",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIOrganization"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIOrganizationResp"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      }
    },
    "/cc/api-organizations/{id}": {
      "get": {
        "tags": [
          "api-organizations"
        ],
        "summary": "get api organization .",
        "operationId": "getAPIOrganization",
        "parameters": [
          {
            "type": "string",
            "description": "id of api organization",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIOrganizationResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      },
      "put": {
        "tags": [
          "api-organizations"
        ],
        "summary": "update api organization.",
        "operationId": "updateAPIOrganization",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIOrganization"
            }
          },
          {
            "type": "string",
            "description": "id of api organization",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIOrganizationResp"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      },
      "delete": {
        "tags": [
          "api-organizations"
        ],
        "summary": "delete api organization .",
        "operationId": "deleteAPIOrganization",
        "parameters": [
          {
            "type": "string",
            "description": "id of apiorganization",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/noContent"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      }
    },
    "/cc/api-organizations/{id}/stats": {
      "get": {
        "tags": [
          "api-organizations"
        ],
        "summary": "get api organization stats .",
        "operationId": "getAPIOrganizationStats",
        "parameters": [
          {
            "type": "string",
            "description": "id of api organization stats",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIOrganizationStatsResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/cc/api-package-keys": {
      "get": {
        "tags": [
          "api-package-keys"
        ],
        "summary": "get api package keys.",
        "operationId": "getAPIAppsPackageKeys",
        "responses": {
          "200": {
            "$ref": "#/responses/APIPackageKeysResp"
          },
          "500": {
            "$ref": "#/responses/internal"
          }
        }
      }
    },
    "/cc/api-packages": {
      "get": {
        "tags": [
          "api-packages"
        ],
        "summary": "get api packages.",
        "operationId": "getAPIPackages",
        "responses": {
          "200": {
            "$ref": "#/responses/APIPackagesResp"
          },
          "500": {
            "$ref": "#/responses/internal"
          }
        }
      },
      "post": {
        "tags": [
          "api-packages"
        ],
        "summary": "create api-packages.",
        "operationId": "createAPIPackages",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIPackage"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIPackageResp"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      }
    },
    "/cc/api-packages/{id}": {
      "get": {
        "tags": [
          "api-packages"
        ],
        "summary": "get APIPackage .",
        "operationId": "getAPIPackage",
        "parameters": [
          {
            "type": "string",
            "description": "id of APIPackage",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIPackageResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      },
      "put": {
        "tags": [
          "api-packages"
        ],
        "summary": "update APIPackage.",
        "operationId": "updateAPIPackage",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIPackage"
            }
          },
          {
            "type": "string",
            "description": "id of APIPackage",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIPackageResp"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      },
      "delete": {
        "tags": [
          "api-packages"
        ],
        "summary": "delete APIPackage .",
        "operationId": "deleteAPIPackage",
        "parameters": [
          {
            "type": "string",
            "description": "id of APIPackage",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/noContent"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      }
    },
    "/cc/api-packages/{package_id}/api-plans": {
      "get": {
        "tags": [
          "api-packages"
        ],
        "summary": "get APIPackage plan.",
        "operationId": "getAPIPlans",
        "parameters": [
          {
            "type": "string",
            "description": "id of APIPackage",
            "name": "package_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIPlansResp"
          },
          "500": {
            "$ref": "#/responses/internal"
          }
        }
      },
      "post": {
        "tags": [
          "api-packages"
        ],
        "summary": "create api-packages plan.",
        "operationId": "createAPIPlan",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIPlan"
            }
          },
          {
            "type": "string",
            "description": "id of APIPackage",
            "name": "package_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIPlanResp"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      }
    },
    "/cc/api-packages/{package_id}/api-plans/{id}": {
      "get": {
        "tags": [
          "api-packages"
        ],
        "summary": "get api-packages plan.",
        "operationId": "getAPIPlan",
        "parameters": [
          {
            "type": "string",
            "description": "id of APIPackage",
            "name": "package_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of APIPackage plan",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIPlanResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      },
      "put": {
        "tags": [
          "api-packages"
        ],
        "summary": "put api-packages plan.",
        "operationId": "updateAPIPlan",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIPlan"
            }
          },
          {
            "type": "string",
            "description": "package_id of APIPackage",
            "name": "package_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of APIPackage plan",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIPlanResp"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      },
      "delete": {
        "tags": [
          "api-packages"
        ],
        "summary": "delete api-packages plan.",
        "operationId": "deleteAPIPlan",
        "parameters": [
          {
            "type": "string",
            "description": "id of APIPackage",
            "name": "package_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of APIPackage plan",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/noContent"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      }
    },
    "/cc/api-packages/{package_id}/api-plans/{id}/rate-limit": {
      "get": {
        "tags": [
          "api-packages"
        ],
        "summary": "get APIPackage plan ratelimits.",
        "operationId": "getAPIPlanRateLimit",
        "parameters": [
          {
            "type": "string",
            "description": "id of APIPackage",
            "name": "package_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of APIPackage plan ratelimit",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIPlanRateLimitResp"
          },
          "500": {
            "$ref": "#/responses/internal"
          }
        }
      },
      "put": {
        "tags": [
          "api-packages"
        ],
        "summary": "put APIPackage plan ratelimits.",
        "operationId": "updateAPIPlanRateLimit",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIPlanRateLimit"
            }
          },
          {
            "type": "string",
            "description": "id of APIPackage",
            "name": "package_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of APIPackage plan ratelimit",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIPlanRateLimitResp"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/internal"
          }
        }
      }
    },
    "/cc/api-packages/{package_id}/api-plans/{plan_id}/api-plan-definitions": {
      "get": {
        "tags": [
          "api-packages"
        ],
        "summary": "get APIPackage plan definitions.",
        "operationId": "getAPIPlanDefinitions",
        "parameters": [
          {
            "type": "string",
            "description": "id of APIPackage",
            "name": "package_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of APIPackage plan",
            "name": "plan_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIPlanDefinitionsResp"
          },
          "500": {
            "$ref": "#/responses/internal"
          }
        }
      },
      "post": {
        "tags": [
          "api-packages"
        ],
        "summary": "create api-packages plan definition.",
        "operationId": "createAPIPlanDefinitions",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIPlanDefinition"
            }
          },
          {
            "type": "string",
            "description": "id of APIPackage",
            "name": "package_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of APIPackage plan",
            "name": "plan_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIPlanDefinitionResp"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      }
    },
    "/cc/api-packages/{package_id}/api-plans/{plan_id}/api-plan-definitions/{api_definition_id}/api-plan-endpoints": {
      "get": {
        "tags": [
          "api-packages"
        ],
        "summary": "get APIPackage plan definitions endpoints.",
        "operationId": "getAPIPlanEndpoints",
        "parameters": [
          {
            "type": "string",
            "description": "id of APIPackage",
            "name": "package_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of APIPackage plan",
            "name": "plan_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of APIPackage plan definition",
            "name": "api_definition_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIPlanEndpointsResp"
          },
          "500": {
            "$ref": "#/responses/internal"
          }
        }
      },
      "post": {
        "tags": [
          "api-packages"
        ],
        "summary": "create api-packages plan definition endpoints.",
        "operationId": "createAPIPlanEndpoint",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIPlanDefinition"
            }
          },
          {
            "type": "string",
            "description": "id of APIPackage",
            "name": "package_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of APIPackage plan",
            "name": "plan_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of APIPackage plan definition",
            "name": "api_definition_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIPlanEndpointResp"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      }
    },
    "/cc/api-packages/{package_id}/api-plans/{plan_id}/api-plan-definitions/{api_definition_id}/api-plan-endpoints/{endpoint_id}/api-plan-methods": {
      "get": {
        "tags": [
          "api-packages"
        ],
        "summary": "get APIPackage plan definitions endpoints methods.",
        "operationId": "getAPIPlanMethods",
        "parameters": [
          {
            "type": "string",
            "description": "id of APIPackage",
            "name": "package_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of APIPackage plan",
            "name": "plan_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of APIPackage plan definition",
            "name": "api_definition_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of APIPackage plan definition endpoint",
            "name": "endpoint_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIPlanEndpointsResp"
          },
          "500": {
            "$ref": "#/responses/internal"
          }
        }
      },
      "post": {
        "tags": [
          "api-packages"
        ],
        "summary": "create api-packages plan definition endpoints methods.",
        "operationId": "createAPIPlanMethod",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIPlanEndpoint"
            }
          },
          {
            "type": "string",
            "description": "id of APIPackage",
            "name": "package_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of APIPackage plan",
            "name": "plan_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of APIPackage plan definition",
            "name": "api_definition_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of APIPackage plan definition endpoint",
            "name": "endpoint_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIPlanEndpointResp"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      }
    },
    "/cc/api-packages/{package_id}/api-plans/{plan_id}/api-plan-definitions/{api_definition_id}/api-plan-endpoints/{endpoint_id}/api-plan-methods/{id}": {
      "get": {
        "tags": [
          "api-packages"
        ],
        "summary": "get api-packages plan definition endpoints methods.",
        "operationId": "getAPIPlanMethod",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIPlanMethod"
            }
          },
          {
            "type": "string",
            "description": "id of APIPackage",
            "name": "package_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of APIPackage plan",
            "name": "plan_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of APIPackage plan definition",
            "name": "api_definition_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of APIPackage plan definition endpoint",
            "name": "endpoint_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of APIPackage plan definition endpoints methods",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIPlanMethodsResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      },
      "put": {
        "tags": [
          "api-packages"
        ],
        "summary": "put api-packages plan definition endpoints methods.",
        "operationId": "updateAPIPlanMethod",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIPlanMethod"
            }
          },
          {
            "type": "string",
            "description": "id of APIPackage",
            "name": "package_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of APIPackage plan",
            "name": "plan_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of APIPackage plan definition",
            "name": "api_definition_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of APIPackage plan definition endpoints",
            "name": "endpoint_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of APIPackage plan definition endpoints methods",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIPlanMethodResp"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      },
      "delete": {
        "tags": [
          "api-packages"
        ],
        "summary": "delete api-packages plan definition endpoints methods.",
        "operationId": "deleteAPIPlanMethod",
        "parameters": [
          {
            "type": "string",
            "description": "id of APIPackage",
            "name": "package_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of APIPackage plan",
            "name": "plan_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of APIPackage plan definition",
            "name": "api_definition_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of APIPackage plan definition endpoint",
            "name": "endpoint_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of APIPackage plan definition endpoints methods",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/noContent"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      }
    },
    "/cc/api-packages/{package_id}/api-plans/{plan_id}/api-plan-definitions/{api_definition_id}/api-plan-endpoints/{id}": {
      "get": {
        "tags": [
          "api-packages"
        ],
        "summary": "get api-packages plan definition endpoints.",
        "operationId": "getAPIPlanEndpoint",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIPlanEndpoint"
            }
          },
          {
            "type": "string",
            "description": "id of APIPackage",
            "name": "package_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of APIPackage plan",
            "name": "plan_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of APIPackage plan definition",
            "name": "api_definition_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of APIPackage plan definition endpoints",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIPlanEndpointResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      },
      "put": {
        "tags": [
          "api-packages"
        ],
        "summary": "put api-packages plan definition endppints.",
        "operationId": "updateAPIPlanEndpoint",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIPlanEndpoint"
            }
          },
          {
            "type": "string",
            "description": "id of APIPackage",
            "name": "package_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of APIPackage plan",
            "name": "plan_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of APIPackage plan definition",
            "name": "api_definition_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of APIPackage plan definition endpoints",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIPlanEndpointResp"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      },
      "delete": {
        "tags": [
          "api-packages"
        ],
        "summary": "delete api-packages plan definition endpoints.",
        "operationId": "deleteAPIPlanEndpoint",
        "parameters": [
          {
            "type": "string",
            "description": "id of APIPackage",
            "name": "package_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of APIPackage plan",
            "name": "plan_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of APIPackage plan definition",
            "name": "api_definition_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of APIPackage plan definition endpoints",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/noContent"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      }
    },
    "/cc/api-packages/{package_id}/api-plans/{plan_id}/api-plan-definitions/{id}": {
      "get": {
        "tags": [
          "api-packages"
        ],
        "summary": "get api-packages plan definition.",
        "operationId": "getAPIPlanDefinition",
        "parameters": [
          {
            "type": "string",
            "description": "id of APIPackage",
            "name": "package_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of APIPackage plan",
            "name": "plan_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of APIPackage plan definition",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIPlanDefinitionResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      },
      "put": {
        "tags": [
          "api-packages"
        ],
        "summary": "put api-packages plan definition.",
        "operationId": "updateAPIPlanDefinition",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIPlanDefinition"
            }
          },
          {
            "type": "string",
            "description": "id of APIPackage",
            "name": "package_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of APIPackage plan",
            "name": "plan_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of APIPackage plan definition",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIPlanDefinitionResp"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      },
      "delete": {
        "tags": [
          "api-packages"
        ],
        "summary": "delete api-packages plan definition.",
        "operationId": "deleteAPIPlanDefinition",
        "parameters": [
          {
            "type": "string",
            "description": "id of APIPackage",
            "name": "package_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of APIPackage plan",
            "name": "plan_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of APIPackage plan definition",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/noContent"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      }
    },
    "/cc/api-planemailtemplate-sets": {
      "get": {
        "summary": "List planemailtemplate sets.",
        "operationId": "getAPIPlanEmailTemplatessSet",
        "responses": {
          "200": {
            "$ref": "#/responses/APIPlanEmailTemplatesSetResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/cc/api-planemailtemplate-sets/{api_emailtemplate_set_id}/api-planemailtemplates": {
      "get": {
        "summary": "List planemailtemplates.",
        "operationId": "getAPIPlanEmailTemplates",
        "parameters": [
          {
            "type": "string",
            "description": "id of api plan email template set",
            "name": "api_emailtemplate_set_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIPlanEmailTemplatesResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/cc/api-planemailtemplate-sets/{api_emailtemplate_set_id}/api-planemailtemplates/{id}": {
      "get": {
        "tags": [
          "api-planemailtemplate"
        ],
        "summary": "get api plan email template.",
        "operationId": "getAPIPlanEmailTemplate",
        "parameters": [
          {
            "type": "string",
            "description": "id of api plan email template",
            "name": "api_emailtemplate_set_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of api plan email template",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIPlanEmailTemplateResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/cc/api-planemailtemplate-sets/{id}": {
      "get": {
        "tags": [
          "api-planemailtemplate-sets"
        ],
        "summary": "get api plan email template set.",
        "operationId": "getAPIPlanEmailTemplatesSet",
        "parameters": [
          {
            "type": "string",
            "description": "id of api plan email template set",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIPlanEmailTemplateSetResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/cc/api-roles": {
      "get": {
        "tags": [
          "api-roles"
        ],
        "summary": "get api roles.",
        "operationId": "getAPIRoles",
        "responses": {
          "200": {
            "$ref": "#/responses/APIRolesResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      },
      "post": {
        "tags": [
          "api-roles"
        ],
        "summary": "create api role.",
        "operationId": "createAPIRole",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIRole"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIRoleResp"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      }
    },
    "/cc/api-roles/{id}": {
      "get": {
        "tags": [
          "api-roles"
        ],
        "summary": "get api role.",
        "operationId": "getAPIRole",
        "parameters": [
          {
            "type": "string",
            "description": "id of api role",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIRoleResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      },
      "put": {
        "tags": [
          "api-roles"
        ],
        "summary": "update api role.",
        "operationId": "updateAPIRole",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIRole"
            }
          },
          {
            "type": "string",
            "description": "id of api role",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIRoleResp"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      },
      "delete": {
        "tags": [
          "api-roles"
        ],
        "summary": "delete api role.",
        "operationId": "deleteAPIRole",
        "parameters": [
          {
            "type": "string",
            "description": "id of api role",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/noContent"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      }
    },
    "/cc/api-schedule-maintenance": {
      "get": {
        "tags": [
          "api-schedule-maintenance"
        ],
        "summary": "get api scheduled maintenance events.",
        "operationId": "getAPIScheduledMaintenanceEvents",
        "responses": {
          "200": {
            "$ref": "#/responses/APIScheduledMaintenanceEventsResp"
          },
          "500": {
            "$ref": "#/responses/internal"
          }
        }
      },
      "post": {
        "tags": [
          "api-schedule-maintenance"
        ],
        "summary": "create api scheduled maintenance events.",
        "operationId": "createAPIScheduledMaintenanceEvent",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIScheduledMaintenanceEvent"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIScheduledMaintenanceEventResp"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      }
    },
    "/cc/api-schedule-maintenance/{id}": {
      "get": {
        "tags": [
          "api-schedule-maintenance"
        ],
        "summary": "get api schedulded maintenance event details of an maintenance event.",
        "operationId": "getAPIScheduledMaintenanceEvent",
        "parameters": [
          {
            "type": "string",
            "description": "id of api scheduled maintenace event",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIScheduledMaintenanceEventResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      },
      "put": {
        "tags": [
          "api-schedule-maintenance"
        ],
        "summary": "update api scheduled maintenance event.",
        "operationId": "updateAPIScheduledMaintenanceEvent",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIScheduledMaintenanceEvent"
            }
          },
          {
            "type": "string",
            "description": "id of api scheduled maintenance event",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIScheduledMaintenanceEventResp"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      },
      "delete": {
        "tags": [
          "api-schedule-maintenance"
        ],
        "summary": "delete api scheduled maintenance event .",
        "operationId": "deleteAPIScheduledMaintenanceEvent",
        "parameters": [
          {
            "type": "string",
            "description": "id of api scheduled maintenance event",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/noContent"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      }
    },
    "/cc/api-schedule-maintenance/{maintenance_id}/endpoints": {
      "get": {
        "tags": [
          "api-schedule-maintenance-endpoints"
        ],
        "summary": "get api scheduled maintenance endpoint .",
        "operationId": "getAPIScheduledMaintenanceEndpoints",
        "parameters": [
          {
            "type": "string",
            "description": "id of api scheduled maintenance event",
            "name": "maintenance_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIScheduledMaintenanceEventEndpointsResp"
          },
          "500": {
            "$ref": "#/responses/internal"
          }
        }
      },
      "post": {
        "tags": [
          "api-schedule-maintenance-endpoints"
        ],
        "summary": "create api scheduled maintenance endpoint .",
        "operationId": "createAPIScheduledMaintenanceEndpoints",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIScheduledMaintenanceEventEndpoint"
            }
          },
          {
            "type": "string",
            "description": "id of api scheduled maintenance event",
            "name": "maintenance_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIScheduledMaintenanceEventEndpointResp"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      }
    },
    "/cc/api-schedule-maintenance/{maintenance_id}/endpoints/{id}": {
      "delete": {
        "tags": [
          "api-schedule-maintenance-endpoints"
        ],
        "summary": "delete api scheduled maintenance endpoint .",
        "operationId": "deleteAPIScheduledMaintenanceEndpoints",
        "parameters": [
          {
            "type": "string",
            "description": "id of api scheduled maintenance event",
            "name": "maintenance_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of api scheduled maintenance endpoint",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/noContent"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      }
    },
    "/cc/apps": {
      "get": {
        "tags": [
          "apps"
        ],
        "summary": "get apps.",
        "operationId": "getApps",
        "responses": {
          "200": {
            "$ref": "#/responses/AppsResp"
          },
          "500": {
            "$ref": "#/responses/internal"
          }
        }
      },
      "post": {
        "tags": [
          "apps"
        ],
        "summary": "create app.",
        "operationId": "createApp",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/App"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/AppResp"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      }
    },
    "/cc/apps/{app_id}/api-package-keys": {
      "get": {
        "tags": [
          "apps"
        ],
        "summary": "get app package keys .",
        "operationId": "getAPIPackageKeys",
        "parameters": [
          {
            "type": "string",
            "description": "id of app",
            "name": "app_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIPackageKeysResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      },
      "post": {
        "tags": [
          "apps"
        ],
        "summary": "create app package keys.",
        "operationId": "createAPIPackageKey",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIPackageKey"
            }
          },
          {
            "type": "string",
            "description": "id of app",
            "name": "app_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIPackageKeyResp"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      }
    },
    "/cc/apps/{app_id}/api-package-keys/{id}": {
      "get": {
        "tags": [
          "apps"
        ],
        "summary": "get app package keys .",
        "operationId": "getAPIPackageKey",
        "parameters": [
          {
            "type": "string",
            "description": "id of app",
            "name": "app_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of app package keys",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIPackageKeyResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      },
      "put": {
        "tags": [
          "apps"
        ],
        "summary": "update app package keys .",
        "operationId": "updateAPIPackageKey",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIPackageKey"
            }
          },
          {
            "type": "string",
            "description": "id of app",
            "name": "app_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of app package keys",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/APIPackageKeyResp"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      },
      "delete": {
        "tags": [
          "apps"
        ],
        "summary": "delete app package keys .",
        "operationId": "deleteAPIPackageKey",
        "parameters": [
          {
            "type": "string",
            "description": "id of app",
            "name": "app_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of app pacakge keys",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/noContent"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      }
    },
    "/cc/apps/{id}": {
      "get": {
        "tags": [
          "apps"
        ],
        "summary": "get app .",
        "operationId": "getApp",
        "parameters": [
          {
            "type": "string",
            "description": "id of app",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/AppResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      },
      "put": {
        "tags": [
          "apps"
        ],
        "summary": "update app.",
        "operationId": "updateApp",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/App"
            }
          },
          {
            "type": "string",
            "description": "id of app",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/AppResp"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      },
      "delete": {
        "tags": [
          "apps"
        ],
        "summary": "delete app .",
        "operationId": "deleteApp",
        "parameters": [
          {
            "type": "string",
            "description": "id of app",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/noContent"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      }
    },
    "/cc/area-configs": {
      "get": {
        "tags": [
          "zone-settings"
        ],
        "summary": "List area configs.",
        "operationId": "getAreaConfigs",
        "responses": {
          "200": {
            "$ref": "#/responses/areaConfigsResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/cc/area-configs/test-ldap": {
      "get": {
        "tags": [
          "zone-settings"
        ],
        "summary": "Test ldap settings.",
        "operationId": "getAreaConfigsLDAPTest",
        "responses": {
          "200": {
            "$ref": "#/responses/empty"
          },
          "500": {
            "$ref": "#/responses/internal"
          }
        }
      }
    },
    "/cc/area-configs/test-saml": {
      "get": {
        "tags": [
          "zone-settings"
        ],
        "summary": "Test SAML settings.",
        "operationId": "getAreaConfigsSAMLTest",
        "responses": {
          "200": {
            "$ref": "#/responses/empty"
          },
          "500": {
            "$ref": "#/responses/internal"
          }
        }
      }
    },
    "/cc/area-configs/{id}": {
      "get": {
        "tags": [
          "zone-settings"
        ],
        "summary": "List area config details.",
        "operationId": "getAreaConfig",
        "parameters": [
          {
            "type": "string",
            "description": "Area config id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/areaConfigResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      },
      "put": {
        "tags": [
          "zone-settings"
        ],
        "summary": "Update area config details.",
        "operationId": "updateAreaConfig",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AreaConfig"
            }
          },
          {
            "type": "string",
            "description": "uuID of area config",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/areaConfigResp"
          }
        }
      }
    },
    "/cc/cms/folders": {
      "post": {
        "tags": [
          "cms"
        ],
        "summary": "create new folder.",
        "operationId": "createFolder",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Folder"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/FolderResp"
          }
        }
      }
    },
    "/cc/cms/folders/{id}": {
      "get": {
        "tags": [
          "cms"
        ],
        "summary": "get folder.",
        "operationId": "getFolder",
        "parameters": [
          {
            "type": "string",
            "description": "folder id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/FolderResp"
          }
        }
      },
      "put": {
        "tags": [
          "cms"
        ],
        "summary": "update folder.",
        "operationId": "updateFolder",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Folder"
            }
          },
          {
            "type": "string",
            "description": "folder id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/FolderResp"
          }
        }
      },
      "delete": {
        "tags": [
          "cms"
        ],
        "summary": "delete a folder.",
        "operationId": "deleteFolder",
        "parameters": [
          {
            "type": "string",
            "description": "folder id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/noContent"
          }
        }
      }
    },
    "/cc/cms/folders/{id}/parent": {
      "put": {
        "tags": [
          "cms"
        ],
        "summary": "reparent folder.",
        "operationId": "reparentFolder",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Folder"
            }
          },
          {
            "type": "string",
            "description": "folder id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/noContent"
          }
        }
      }
    },
    "/cc/cms/folders/{id}/versions": {
      "get": {
        "tags": [
          "cms"
        ],
        "summary": "get all versions.",
        "operationId": "getAllFOlderVersions",
        "parameters": [
          {
            "type": "string",
            "description": "page id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/FolderResp"
          }
        }
      }
    },
    "/cc/cms/pages": {
      "post": {
        "tags": [
          "cms"
        ],
        "summary": "create new page.",
        "operationId": "createPage",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Page"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PageResp"
          }
        }
      }
    },
    "/cc/cms/pages/{id}": {
      "get": {
        "tags": [
          "cms"
        ],
        "summary": "get page.",
        "operationId": "getPage",
        "parameters": [
          {
            "type": "string",
            "description": "page id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PageResp"
          }
        }
      },
      "put": {
        "tags": [
          "cms"
        ],
        "summary": "update page.",
        "operationId": "updatePage",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Page"
            }
          },
          {
            "type": "string",
            "description": "page id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PageResp"
          }
        }
      },
      "delete": {
        "tags": [
          "cms"
        ],
        "summary": "delete a page.",
        "operationId": "deletePage",
        "parameters": [
          {
            "type": "string",
            "description": "page id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/noContent"
          }
        }
      }
    },
    "/cc/cms/pages/{id}/parent": {
      "put": {
        "tags": [
          "cms"
        ],
        "summary": "reparent page.",
        "operationId": "reparentPage",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Page"
            }
          },
          {
            "type": "string",
            "description": "page id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/noContent"
          }
        }
      }
    },
    "/cc/cms/pages/{id}/versions": {
      "get": {
        "tags": [
          "cms"
        ],
        "summary": "get all versions.",
        "operationId": "getAllVersions",
        "parameters": [
          {
            "type": "string",
            "description": "page id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PageResp"
          }
        }
      }
    },
    "/cc/cms/pages/{id}/versions/{version}": {
      "put": {
        "tags": [
          "cms"
        ],
        "summary": "update version.",
        "operationId": "revertPageToVersion",
        "parameters": [
          {
            "description": "version update input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Page"
            }
          },
          {
            "type": "string",
            "description": "page id",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "version id",
            "name": "version",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PageResp"
          }
        }
      }
    },
    "/cc/cms/sitemap": {
      "get": {
        "tags": [
          "cms"
        ],
        "summary": "get cms sitemap.",
        "operationId": "getSiteMap",
        "responses": {
          "200": {
            "$ref": "#/responses/SiteMapResp"
          }
        }
      }
    },
    "/cc/cms/sitemap/{id}": {
      "get": {
        "tags": [
          "cms"
        ],
        "summary": "update sitemap position.",
        "operationId": "GetSiteMapNode",
        "parameters": [
          {
            "type": "string",
            "description": "sitemap id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SiteMapResponse"
          }
        }
      },
      "put": {
        "tags": [
          "cms"
        ],
        "summary": "update sitemap position.",
        "operationId": "RepositionCmsNode",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SiteMapRequest"
            }
          },
          {
            "type": "string",
            "description": "sitemap id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/noContent"
          }
        }
      }
    },
    "/cc/domains": {
      "get": {
        "tags": [
          "domains"
        ],
        "summary": "get portal domain.",
        "operationId": "getPortalDomains",
        "responses": {
          "200": {
            "$ref": "#/responses/PortalDomainsResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      },
      "post": {
        "tags": [
          "domains"
        ],
        "summary": "create portal domains.",
        "operationId": "createPortalDomains",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PortalDomain"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PortalDomainResp"
          }
        }
      }
    },
    "/cc/domains/{id}": {
      "get": {
        "tags": [
          "domains"
        ],
        "summary": "get domain.",
        "operationId": "getPortalDomain",
        "parameters": [
          {
            "type": "string",
            "description": "id of domain",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PortalDomainResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      },
      "put": {
        "tags": [
          "domains"
        ],
        "summary": "update domain.",
        "operationId": "updatePortalDomain",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PortalDomain"
            }
          },
          {
            "type": "string",
            "description": "id of domain",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PortalDomainResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      },
      "delete": {
        "tags": [
          "domains"
        ],
        "summary": "delete domain.",
        "operationId": "deletePortalDomain",
        "parameters": [
          {
            "type": "string",
            "description": "id of domain",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/noContent"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/cc/login-configs": {
      "get": {
        "tags": [
          "login-settings"
        ],
        "summary": "Get login config.",
        "operationId": "getAdminLoginConfigs",
        "responses": {
          "200": {
            "$ref": "#/responses/loginConfigResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/cc/members": {
      "get": {
        "tags": [
          "members"
        ],
        "summary": "List members.",
        "operationId": "getMembers",
        "responses": {
          "200": {
            "$ref": "#/responses/membersResp"
          },
          "500": {
            "$ref": "#/responses/internal"
          }
        }
      },
      "post": {
        "tags": [
          "members"
        ],
        "summary": "create new member.",
        "operationId": "createMember",
        "parameters": [
          {
            "description": "user creation input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Member"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/memberResp"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      }
    },
    "/cc/members/{id}": {
      "get": {
        "tags": [
          "members"
        ],
        "summary": "List particular member details.",
        "operationId": "getMember",
        "parameters": [
          {
            "type": "string",
            "description": "id of the member",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/memberResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      },
      "put": {
        "tags": [
          "members"
        ],
        "summary": "update member details from admin api.",
        "operationId": "updateMember",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Member"
            }
          },
          {
            "type": "string",
            "description": "uuID of member",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/memberResp"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      },
      "delete": {
        "tags": [
          "members"
        ],
        "summary": "delete member details.",
        "operationId": "deleteMember",
        "parameters": [
          {
            "type": "string",
            "description": "uuID of member",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/noContent"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      }
    },
    "/cc/members/{id}/usage-report": {
      "get": {
        "tags": [
          "members"
        ],
        "summary": "Member usage report of individual members",
        "operationId": "showMemberReport",
        "parameters": [
          {
            "type": "string",
            "description": "id of member",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/userUsageReportResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "500": {
            "$ref": "#/responses/internal"
          }
        }
      }
    },
    "/cc/perspectives": {
      "get": {
        "tags": [
          "perspectives"
        ],
        "summary": "Get Perspectives.",
        "operationId": "GetPerspectives",
        "responses": {
          "200": {
            "$ref": "#/responses/PageDataResp"
          }
        }
      }
    },
    "/cc/portal-settings": {
      "get": {
        "tags": [
          "portal-settings"
        ],
        "summary": "Get Portal Configs.",
        "operationId": "getPortalConfigs",
        "responses": {
          "200": {
            "$ref": "#/responses/AreasResp"
          }
        }
      }
    },
    "/cc/portal-settings/emails": {
      "get": {
        "tags": [
          "portal-settings"
        ],
        "summary": "Get Portal Emails.",
        "operationId": "GetEmailTemplate",
        "responses": {
          "200": {
            "$ref": "#/responses/AreasResp"
          }
        }
      },
      "put": {
        "tags": [
          "portal-settings"
        ],
        "summary": "Update portal config details.",
        "operationId": "UpdateEmailTemplates",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Area"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/AreaResp"
          }
        }
      }
    },
    "/cc/portal-settings/nav": {
      "get": {
        "tags": [
          "portal-settings"
        ],
        "summary": "get portal nav list.",
        "operationId": "GetPortalNav",
        "parameters": [
          {
            "type": "string",
            "description": "nav type",
            "name": "type",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PortalNavListResp"
          }
        }
      },
      "post": {
        "tags": [
          "portal-settings"
        ],
        "summary": "create new nav.",
        "operationId": "CreatePortalNav",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PortalNavReq"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PortalNavResp"
          }
        }
      }
    },
    "/cc/portal-settings/nav/{id}": {
      "get": {
        "tags": [
          "portal-settings"
        ],
        "summary": "List particular nav details.",
        "operationId": "GetNavItem",
        "parameters": [
          {
            "type": "string",
            "description": "id of the nav",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PortalNavResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      },
      "put": {
        "tags": [
          "portal-settings"
        ],
        "summary": "Update portal nav details.",
        "operationId": "UpdatePortalNav",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PortalNavReq"
            }
          },
          {
            "type": "string",
            "description": "portal nav id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PortalNavResp"
          }
        }
      },
      "delete": {
        "tags": [
          "portal-settings"
        ],
        "summary": "delete a nav.",
        "operationId": "DeletePortalNav",
        "parameters": [
          {
            "type": "string",
            "description": "nav id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/noContent"
          }
        }
      }
    },
    "/cc/portal-settings/{id}": {
      "put": {
        "tags": [
          "portal-settings"
        ],
        "summary": "Update portal config details.",
        "operationId": "updatePortalConfig",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Area"
            }
          },
          {
            "type": "string",
            "description": "portal config id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/AreaResp"
          }
        }
      }
    },
    "/cc/swaggers": {
      "get": {
        "tags": [
          "swaggers"
        ],
        "summary": "get swaggers.",
        "operationId": "getSwaggers",
        "responses": {
          "200": {
            "$ref": "#/responses/SwaggersResp"
          },
          "500": {
            "$ref": "#/responses/internal"
          }
        }
      }
    },
    "/cc/swaggers/{id}": {
      "get": {
        "tags": [
          "swaggers"
        ],
        "summary": "get Swagger.",
        "operationId": "getSwagger",
        "parameters": [
          {
            "type": "string",
            "description": "uuID of Swagger",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SwaggerResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/cc/swaggers/{id}/{name}": {
      "get": {
        "tags": [
          "swaggers"
        ],
        "summary": "get Swagger.",
        "operationId": "getSwagger",
        "parameters": [
          {
            "type": "string",
            "description": "uuID of Swagger",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of Swagger",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/portal/applications": {
      "get": {
        "tags": [
          "developer-portal"
        ],
        "summary": "get applications.",
        "operationId": "getMemberApplication",
        "responses": {
          "200": {
            "$ref": "#/responses/MemberAppsResp"
          }
        }
      },
      "post": {
        "tags": [
          "developer-portal"
        ],
        "summary": "create application.",
        "operationId": "createPortalApplication",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MemberApp"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/MemberAppResp"
          }
        }
      }
    },
    "/portal/applications/register-apis": {
      "get": {
        "tags": [
          "developer-portal"
        ],
        "summary": "get register apis.",
        "operationId": "getRegistrableAPIs",
        "responses": {
          "200": {
            "$ref": "#/responses/MemberAppResp"
          }
        }
      }
    },
    "/portal/applications/{id}": {
      "get": {
        "tags": [
          "developer-portal"
        ],
        "summary": "get application.",
        "operationId": "getPortalApplication",
        "parameters": [
          {
            "type": "string",
            "description": "application id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/MemberAppResp"
          }
        }
      },
      "put": {
        "tags": [
          "developer-portal"
        ],
        "summary": "update application.",
        "operationId": "updatePortalApplication",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MemberApp"
            }
          },
          {
            "type": "string",
            "description": "application id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/MemberAppResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      },
      "delete": {
        "tags": [
          "developer-portal"
        ],
        "summary": "update application.",
        "operationId": "deletePortalApplication",
        "parameters": [
          {
            "type": "string",
            "description": "application id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/noContent"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/portal/applications/{id}/register-api": {
      "post": {
        "tags": [
          "developer-portal"
        ],
        "summary": "register api.",
        "operationId": "registerAPI",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MemberApp"
            }
          },
          {
            "type": "string",
            "description": "application id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/MemberAppResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/portal/applications/{id}/register-apis": {
      "get": {
        "tags": [
          "developer-portal"
        ],
        "summary": "get register api.",
        "operationId": "getAppRegistrableAPI",
        "parameters": [
          {
            "type": "string",
            "description": "application id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/MemberAppResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/portal/captchaconfig": {
      "get": {
        "tags": [
          "developer-portal"
        ],
        "summary": "get captchaconfig.",
        "operationId": "getCaptchaConfiguration",
        "responses": {
          "200": {
            "$ref": "#/responses/DomainNameResp"
          },
          "500": {
            "$ref": "#/responses/internal"
          }
        }
      }
    },
    "/portal/interactivedocs": {
      "get": {
        "tags": [
          "developer-portal"
        ],
        "summary": "get interactivedocs.",
        "operationId": "getInteractiveDocs",
        "responses": {
          "200": {
            "$ref": "#/responses/InteractiveDocumentResp"
          },
          "500": {
            "$ref": "#/responses/internal"
          }
        }
      }
    },
    "/portal/interactivedocs/{id}": {
      "get": {
        "tags": [
          "developer-portal"
        ],
        "summary": "get interactivedoc.",
        "operationId": "getSpec",
        "parameters": [
          {
            "type": "string",
            "description": "id of interactive document",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/InteractiveDocumentResp"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "500": {
            "$ref": "#/responses/internal"
          }
        }
      }
    },
    "/portal/login-configs": {
      "get": {
        "tags": [
          "login-settings"
        ],
        "summary": "Get login config.",
        "operationId": "getPortalLoginConfigs",
        "responses": {
          "200": {
            "$ref": "#/responses/loginConfigResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/portal/members": {
      "post": {
        "tags": [
          "developer-portal"
        ],
        "summary": "create portal members.",
        "operationId": "createPortalMember",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UserResp"
          },
          "500": {
            "$ref": "#/responses/internal"
          }
        }
      }
    },
    "/portal/members/confirmation/link": {
      "post": {
        "tags": [
          "developer-portal"
        ],
        "summary": "resend confirmation link .",
        "operationId": "resendConfirmationLink",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/noContent"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/portal/members/confirmation/{handle}/{hash}": {
      "post": {
        "tags": [
          "developer-portal"
        ],
        "summary": "forgot password.",
        "operationId": "confirmMember",
        "parameters": [
          {
            "type": "string",
            "description": "handle",
            "name": "handle",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "hash",
            "name": "hash",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          }
        }
      }
    },
    "/portal/members/lost-password": {
      "post": {
        "tags": [
          "developer-portal"
        ],
        "summary": "recover password.",
        "operationId": "recoverPasswordPortalMember",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/noContent"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/portal/members/lost-username": {
      "post": {
        "tags": [
          "developer-portal"
        ],
        "summary": "recover username.",
        "operationId": "recoverUsernamePortalMember",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/noContent"
          }
        }
      }
    },
    "/portal/members/reset/{id}/{timestamp}/{hash}": {
      "post": {
        "tags": [
          "developer-portal"
        ],
        "summary": "update portal member password.",
        "operationId": "updatePortalMemberPassword",
        "parameters": [
          {
            "type": "string",
            "description": "id of user",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "timestamp",
            "name": "timestamp",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "hash",
            "name": "hash",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/noContent"
          }
        }
      }
    },
    "/portal/members/{id}": {
      "get": {
        "tags": [
          "developer-portal"
        ],
        "summary": "get portal member.",
        "operationId": "getPortalMember",
        "parameters": [
          {
            "type": "string",
            "description": "id of user",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UserResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      },
      "put": {
        "tags": [
          "developer-portal"
        ],
        "summary": "update portal member.",
        "operationId": "updatePortalMember",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          {
            "type": "string",
            "description": "id of user",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UserResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      },
      "delete": {
        "tags": [
          "developer-portal"
        ],
        "summary": "delete portal member.",
        "operationId": "deletePortalMember",
        "parameters": [
          {
            "type": "string",
            "description": "id of user",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/noContent"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/portal/packagekeys": {
      "get": {
        "tags": [
          "developer-portal"
        ],
        "summary": "get packagekeys.",
        "operationId": "getMemberPackageKeys",
        "responses": {
          "200": {
            "$ref": "#/responses/PackageKeysResp"
          }
        }
      },
      "post": {
        "tags": [
          "developer-portal"
        ],
        "summary": "create packagekeys.",
        "operationId": "createPortalPackageKey",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PackageKey"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PackageKeyResp"
          }
        }
      }
    },
    "/portal/packagekeys/{id}": {
      "get": {
        "tags": [
          "developer-portal"
        ],
        "summary": "get packagekey.",
        "operationId": "getPortalPackageKeyByUUID",
        "parameters": [
          {
            "type": "string",
            "description": "application id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PackageKeyResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      },
      "put": {
        "tags": [
          "developer-portal"
        ],
        "summary": "update packagekey.",
        "operationId": "updatePortalPackageKey",
        "parameters": [
          {
            "description": "input request body",
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PackageKey"
            }
          },
          {
            "type": "string",
            "description": "application id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PackageKeyResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      },
      "delete": {
        "tags": [
          "developer-portal"
        ],
        "summary": "delete packagekey.",
        "operationId": "deletePortalPackageKey",
        "parameters": [
          {
            "type": "string",
            "description": "application id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/noContent"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntity"
          }
        }
      }
    },
    "/portal/portal-settings": {
      "get": {
        "tags": [
          "developer-portal"
        ],
        "summary": "get portal settings.",
        "operationId": "getPortalPageData",
        "responses": {
          "200": {
            "$ref": "#/responses/PageDataResponse"
          }
        }
      }
    },
    "/token": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Creates a token from mlconfig.",
        "operationId": "createToken",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "password": {
                  "type": "string",
                  "x-go-name": "Password"
                },
                "username": {
                  "type": "string",
                  "x-go-name": "Username"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "401": {
            "$ref": "#/responses/unauthorized"
          },
          "500": {
            "$ref": "#/responses/internal"
          }
        }
      }
    }
  },
  "definitions": {
    "APIClientTrustCertificate": {
      "type": "object",
      "title": "APIClientTrust is a view that represents the Identity model in the database.",
      "properties": {
        "created": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Updated"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "APIDefinition": {
      "type": "object",
      "title": "APIDefinition is a model that represents a ServiceDefinition.",
      "properties": {
        "api_domain_id": {
          "type": "string",
          "x-go-name": "APIDomainID"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "cross_domain_policy": {
          "type": "string",
          "x-go-name": "CrossDomainPolicy"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "identifier": {
          "type": "string",
          "x-go-name": "Identifier"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "org_id": {
          "type": "string",
          "x-go-name": "OrganizationID"
        },
        "org_name": {
          "type": "string",
          "x-go-name": "OrganizationName"
        },
        "qps_limit_overall": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "QPSLimitOverall"
        },
        "rfc_3986_encoded": {
          "type": "boolean",
          "x-go-name": "RFC3986Encoded"
        },
        "robots_policy": {
          "type": "string",
          "x-go-name": "RobotsPolicy"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Roles"
        },
        "swagger_json": {
          "type": "object",
          "additionalProperties": {},
          "x-go-name": "SwaggerJSON"
        },
        "swagger_uri": {
          "type": "string",
          "x-go-name": "SwaggerURI"
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Updated"
        },
        "version": {
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "APIDefinitionPerformanceAcceleration": {
      "type": "object",
      "title": "APIDefinitionPerformanceAcceleration is a view that represents data from a ServiceDefinitionModel.",
      "properties": {
        "cache_ttl": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CacheTTL"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "APIDefinitionSecurity": {
      "type": "object",
      "title": "APIDefinitionSecurity is a view that represents a ServiceDefinition model.",
      "properties": {
        "access_token_ttl": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AccessTokenTTL"
        },
        "access_token_type": {
          "type": "string",
          "x-go-name": "AccessTokenType"
        },
        "allow_multiple_tokens": {
          "type": "boolean",
          "x-go-name": "AllowMultipleTokens"
        },
        "authorization_code_ttl": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AuthorizationCodeTTL"
        },
        "calls_per_second": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CallsPerSecond"
        },
        "enable_header_access_token": {
          "type": "boolean",
          "x-go-name": "EnableHeaderAccessToken"
        },
        "enable_header_client_id": {
          "type": "boolean",
          "x-go-name": "EnableHeaderClientID"
        },
        "enable_header_scope": {
          "type": "boolean",
          "x-go-name": "EnableHeaderScope"
        },
        "enable_header_user_context": {
          "type": "boolean",
          "x-go-name": "EnableHeaderUserContext"
        },
        "enable_mashery_token_api": {
          "type": "boolean",
          "x-go-name": "EnableMasheryTokenAPI"
        },
        "enable_oauth2": {
          "type": "boolean",
          "x-go-name": "EnableOAuth2"
        },
        "enable_refresh_token": {
          "type": "boolean",
          "x-go-name": "EnableRefreshToken"
        },
        "enable_refresh_token_ttl": {
          "type": "boolean",
          "x-go-name": "EnableRefreshTokenTTL"
        },
        "enable_token_based_rate_limits": {
          "type": "boolean",
          "x-go-name": "EnableTokenBasedRateLimits"
        },
        "enable_ttl": {
          "type": "boolean",
          "x-go-name": "EnableTTL"
        },
        "force_oauth_redirect_url": {
          "type": "boolean",
          "x-go-name": "ForceOAuthRedirectURL"
        },
        "force_ssl_redirect": {
          "type": "boolean",
          "x-go-name": "ForceSSLRedirect"
        },
        "grant_type_authorization_code": {
          "type": "boolean",
          "x-go-name": "GrantTypeAuthorizationCode"
        },
        "grant_type_client_credentials": {
          "type": "boolean",
          "x-go-name": "GrantTypeClientCredentials"
        },
        "grant_type_implicit": {
          "type": "boolean",
          "x-go-name": "GrantTypeImplicit"
        },
        "grant_type_password": {
          "type": "boolean",
          "x-go-name": "GrantTypePassword"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "mac_algorithm": {
          "type": "string",
          "x-go-name": "MACAlgorithm"
        },
        "rate_limit_ceiling": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RateLimitCeiling"
        },
        "refresh_token_ttl": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RefreshTokenTTL"
        },
        "secure_tokens": {
          "type": "boolean",
          "x-go-name": "SecureTokens"
        },
        "token_endpoint_supported": {
          "type": "boolean",
          "x-go-name": "TokenEndpointSupported"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "APIDomain": {
      "type": "object",
      "title": "APIDomain is a view that represents a Domain.",
      "properties": {
        "created": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "domain": {
          "type": "string",
          "x-go-name": "Domain"
        },
        "id": {
          "type": "string",
          "x-go-name": "DomainID"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "APIEmailTemplate": {
      "type": "object",
      "title": "APIEmailTemplate is a model that represents a EmailTemplate.",
      "properties": {
        "area_id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "AreaID"
        },
        "body": {
          "type": "string",
          "x-go-name": "Body"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "email_template_set_id": {
          "type": "string",
          "x-go-name": "EmailTemplateSetID"
        },
        "error": {
          "type": "string",
          "x-go-name": "Error"
        },
        "from": {
          "type": "string",
          "x-go-name": "From"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "object_type": {
          "type": "string",
          "x-go-name": "ObjectType"
        },
        "subject": {
          "type": "string",
          "x-go-name": "Subject"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Updated"
        },
        "uuid": {
          "type": "string",
          "x-go-name": "UUID"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "APIEmailTemplateSet": {
      "type": "object",
      "title": "APIEmailTemplateSet is a model that represents a EmailTemplateSet.",
      "properties": {
        "area_id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "AreaID"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "error": {
          "type": "string",
          "x-go-name": "Error"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Updated"
        },
        "uuid": {
          "type": "string",
          "x-go-name": "UUID"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "APIEmailTemplateSets": {
      "type": "object",
      "title": "APIEmailTemplateSets is a collection of APIEmailTemplateSet models.",
      "properties": {
        "collection": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/APIEmailTemplateSet"
          },
          "x-go-name": "APIEmailTemplateSets"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Limit"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Offset"
        },
        "query": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Search"
        },
        "sort": {
          "type": "string",
          "x-go-name": "Sort"
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Total"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "APIEmailTemplates": {
      "type": "object",
      "title": "APIEmailTemplates is a collection of APIEmailTemplate models.",
      "properties": {
        "collection": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/APIEmailTemplate"
          },
          "x-go-name": "APIEmailTemplates"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Limit"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Offset"
        },
        "query": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Search"
        },
        "sort": {
          "type": "string",
          "x-go-name": "Sort"
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Total"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "APIEndpoint": {
      "type": "object",
      "title": "APIEndpoint is a view that represents a ServiceDefinitionEndpoint.",
      "properties": {
        "api_definition_id": {
          "type": "string",
          "x-go-name": "APIDefinitionID"
        },
        "api_https_client_profile_id": {
          "type": "string",
          "x-go-name": "HTTPSClientProfileID"
        },
        "error_set_id": {
          "type": "string",
          "x-go-name": "ErrorSetID"
        },
        "error_set_name": {
          "type": "string",
          "x-go-name": "ErrorSetName"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "public_endpoint_address_path": {
          "type": "string",
          "x-go-name": "PublicEndpointAddressPath"
        },
        "public_endpoint_address_protocol": {
          "type": "boolean",
          "x-go-name": "PublicEndpointAddressProtocol"
        },
        "public_traffic_manager_domain": {
          "type": "string",
          "x-go-name": "PublicTrafficManagerDomain"
        },
        "require_mtls": {
          "type": "boolean",
          "x-go-name": "MutualPublicEndpointAddressProtocol"
        },
        "tm_endpoint_address_domain": {
          "type": "string",
          "x-go-name": "TMEndpointAddressDomain"
        },
        "tm_endpoint_address_params": {
          "type": "string",
          "x-go-name": "TMEndpointAddressParams"
        },
        "tm_endpoint_address_path": {
          "type": "string",
          "x-go-name": "TMEndpointAddressPath"
        },
        "tm_endpoint_address_protocol": {
          "type": "string",
          "x-go-name": "TMEndpointAddressProtocol"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Updated"
        },
        "user_controlled_error_location": {
          "type": "string",
          "x-go-name": "UserControlledErrorLocation"
        },
        "user_controlled_error_location_key": {
          "type": "string",
          "x-go-name": "UserControlledErrorLocationKey"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "APIEndpointCORS": {
      "type": "object",
      "title": "APIEndpointCORS view represents data from a ServiceDefinitionEndpoint model.",
      "properties": {
        "allow_all_domains": {
          "type": "boolean",
          "x-go-name": "AllowAllDomains"
        },
        "allow_cookies": {
          "type": "boolean",
          "x-go-name": "AllowCookies"
        },
        "allowed_headers": {
          "type": "string",
          "x-go-name": "AllowedHeaders"
        },
        "allowed_origins": {
          "type": "string",
          "x-go-name": "AllowedOrigins"
        },
        "api_definition_id": {
          "type": "string",
          "x-go-name": "APIDefinitionID"
        },
        "cors_subdomain_matching_allowed": {
          "type": "boolean",
          "x-go-name": "SubdomainMatchingAllowed"
        },
        "enable_cors": {
          "type": "boolean",
          "x-go-name": "EnableCORS"
        },
        "expose_headers": {
          "type": "string",
          "x-go-name": "ExposeHeaders"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "max_age": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MaxAge"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "APIEndpointCallTransformation": {
      "type": "object",
      "title": "APIEndpointCallTransformation view represents data from a ServiceDefinitionEndpoint model.",
      "properties": {
        "adapter": {
          "type": "string",
          "x-go-name": "Adapter"
        },
        "api_definition_id": {
          "type": "string",
          "x-go-name": "APIDefinitionID"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "perform_postprocess": {
          "type": "boolean",
          "x-go-name": "PerformPostprocess"
        },
        "perform_preprocess": {
          "type": "boolean",
          "x-go-name": "PerformPreprocess"
        },
        "postinputs": {
          "type": "string",
          "x-go-name": "Postinputs"
        },
        "preinputs": {
          "type": "string",
          "x-go-name": "Preinputs"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "APIEndpointDetection": {
      "type": "object",
      "title": "APIEndpointDetection is a view that represents data from a ServiceDefinitionEndpoint model.",
      "properties": {
        "api_definition_id": {
          "type": "string",
          "x-go-name": "APIDefinitionID"
        },
        "custom_authentication_adapter": {
          "type": "string",
          "x-go-name": "CustomAuthenticationAdapter"
        },
        "delete": {
          "type": "boolean",
          "x-go-name": "DELETE"
        },
        "developer_api_key_location": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "DeveloperAPIKeyLocation"
        },
        "endpoint_type": {
          "type": "string",
          "x-go-name": "EndpointType"
        },
        "get": {
          "type": "boolean",
          "x-go-name": "GET"
        },
        "grant_type_authorization_code": {
          "type": "boolean",
          "x-go-name": "GrantTypeAuthorizationCode"
        },
        "grant_type_client_credentials": {
          "type": "boolean",
          "x-go-name": "GrantTypeClientCredentials"
        },
        "grant_type_implicit": {
          "type": "boolean",
          "x-go-name": "GrantTypeImplicit"
        },
        "grant_type_password": {
          "type": "boolean",
          "x-go-name": "GrantTypePassword"
        },
        "head": {
          "type": "boolean",
          "x-go-name": "HEAD"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "key_field_identifier": {
          "type": "string",
          "x-go-name": "KeyFieldIdentifier"
        },
        "method_location": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "MethodLocation"
        },
        "method_location_identifier": {
          "type": "string",
          "x-go-name": "MethodLocationIdentifier"
        },
        "options": {
          "type": "boolean",
          "x-go-name": "OPTIONS"
        },
        "patch": {
          "type": "boolean",
          "x-go-name": "PATCH"
        },
        "post": {
          "type": "boolean",
          "x-go-name": "POST"
        },
        "put": {
          "type": "boolean",
          "x-go-name": "PUT"
        },
        "request_authentication_type": {
          "type": "string",
          "x-go-name": "RequestAuthenticationType"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "APIEndpointMore": {
      "type": "object",
      "title": "APIEndpointMore is a view that represents data from a ServiceDefinitionEndpoint model.",
      "properties": {
        "allow_missing_mapi": {
          "type": "boolean",
          "x-go-name": "AllowMissingMAPI"
        },
        "api_definition_id": {
          "type": "string",
          "x-go-name": "APIDefinitionID"
        },
        "connection_timeout": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ConnectionTimeout"
        },
        "drop_mapi_from_call": {
          "type": "boolean",
          "x-go-name": "DropMAPIFromCall"
        },
        "enable_cookies": {
          "type": "boolean",
          "x-go-name": "EnableCookies"
        },
        "error_jsonp_callback": {
          "type": "string",
          "x-go-name": "ErrorJSONPCallback"
        },
        "error_jsonp_callback_default": {
          "type": "string",
          "x-go-name": "ErrorJSONPCallbackDefault"
        },
        "exclude_headers": {
          "type": "string",
          "x-go-name": "ExcludeHeaders"
        },
        "follow_redirects": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FollowRedirects"
        },
        "gzip": {
          "type": "boolean",
          "x-go-name": "Gzip"
        },
        "gzip_backend_enabled": {
          "type": "boolean",
          "x-go-name": "GzipBackendEnabled"
        },
        "host_passthrough": {
          "type": "boolean",
          "x-go-name": "HostPassthrough"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "message_id_header_request": {
          "type": "boolean",
          "x-go-name": "MessageIDHeaderRequest"
        },
        "message_id_header_response": {
          "type": "boolean",
          "x-go-name": "MessageIDHeaderResponse"
        },
        "rate_limit_header": {
          "type": "boolean",
          "x-go-name": "RateLimitHeader"
        },
        "raw_host_header": {
          "type": "boolean",
          "x-go-name": "RawHostHeader"
        },
        "request_timeout": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RequestTimeout"
        },
        "responder_header": {
          "type": "boolean",
          "x-go-name": "ResponderHeader"
        },
        "service_key_header": {
          "type": "boolean",
          "x-go-name": "ServiceKeyHeader"
        },
        "swap_credentials_mapi": {
          "type": "string",
          "x-go-name": "SwapCredentialsMAPI"
        },
        "swap_credentials_required": {
          "type": "boolean",
          "x-go-name": "SwapCredentialsRequired"
        },
        "swap_credentials_secret": {
          "type": "string",
          "x-go-name": "SwapCredentialsSecret"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "APIEndpointPerformanceAcceleration": {
      "type": "object",
      "title": "APIEndpointPerformanceAcceleration is a view that represents data from a ServiceDefinitionEndpoint model.",
      "properties": {
        "api_definition_id": {
          "type": "string",
          "x-go-name": "APIDefinitionID"
        },
        "cache_ttl": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CacheTTL"
        },
        "headers": {
          "type": "string",
          "x-go-name": "Headers"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "include_accept_charset_header": {
          "type": "boolean",
          "x-go-name": "IncludeAcceptCharsetHeader"
        },
        "include_accept_encoding_header": {
          "type": "boolean",
          "x-go-name": "IncludeAcceptEncodingHeader"
        },
        "include_accept_header": {
          "type": "boolean",
          "x-go-name": "IncludeAcceptHeader"
        },
        "include_accept_language_header": {
          "type": "boolean",
          "x-go-name": "IncludeAcceptLanguageHeader"
        },
        "use_developer_key_in_content_cache_key": {
          "type": "boolean",
          "x-go-name": "IncludeDeveloperKey"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "APIEndpointScheduledMaintenanceEvent": {
      "type": "object",
      "title": "APIEndpointScheduledMaintenanceEvent is a model that represents a ScheduleMaintenance with endpoint.",
      "properties": {
        "api_definition_id": {
          "type": "string",
          "x-go-name": "APIDefinitionID"
        },
        "api_endpoint_id": {
          "type": "string",
          "x-go-name": "APIEndpointID"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "end_time": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "EndTime"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "start_time": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "StartTime"
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Updated"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "APIEndpointSecurity": {
      "type": "object",
      "title": "APIEndpointSecurity view represents data from a ServiceDefinitionEndpoint model.",
      "properties": {
        "api_definition_id": {
          "type": "string",
          "x-go-name": "APIDefinitionID"
        },
        "basic_auth_password": {
          "type": "string",
          "x-go-name": "BasicAuthPassword"
        },
        "basic_auth_username": {
          "type": "string",
          "x-go-name": "BasicAuthUsername"
        },
        "certificate": {
          "type": "string",
          "x-go-name": "Certificate"
        },
        "certificate_password": {
          "type": "string",
          "x-go-name": "CertificatePassword"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "system_domain_authentication_type": {
          "type": "string",
          "x-go-name": "SystemDomainAuthenticationType"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "APIErrorMessage": {
      "type": "object",
      "title": "APIErrorMessage is a view that represents a ErrorMessage.",
      "properties": {
        "api_definition_id": {
          "type": "string",
          "x-go-name": "APIDefinitionID"
        },
        "api_errorset_id": {
          "type": "string",
          "x-go-name": "APIErrorSetID"
        },
        "code": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "detail_header": {
          "type": "string",
          "x-go-name": "DetailHeader"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "response_body": {
          "type": "string",
          "x-go-name": "ResponseBody"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "APIErrorSet": {
      "type": "object",
      "title": "APIErrorSet is a view that represents a ErrorSet.",
      "properties": {
        "api_definition_id": {
          "type": "string",
          "x-go-name": "APIDefinitionID"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "jsonp": {
          "type": "boolean",
          "x-go-name": "JSONp"
        },
        "jsonp_type": {
          "type": "string",
          "x-go-name": "JSONpType"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "APIHTTPSClientProfile": {
      "type": "object",
      "title": "APIHTTPSClientProfile is a view that represents the HTTPSClientProfile model in the database.",
      "properties": {
        "created": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "identity_id": {
          "type": "string",
          "x-go-name": "IdentityID"
        },
        "identity_store_name": {
          "type": "string",
          "x-go-name": "IdentityStoreName"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "sni": {
          "type": "boolean",
          "x-go-name": "Sni"
        },
        "trust_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "HTTPSClientTrusts"
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Updated"
        },
        "verify_hostname": {
          "type": "boolean",
          "x-go-name": "VerifyHostname"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "APIIdentity": {
      "type": "object",
      "title": "APIIdentity is a view that represents the Identity model in the database.",
      "properties": {
        "created": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Updated"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "APIInteractiveDoc": {
      "type": "object",
      "title": "APIDefinition is a model that represents a ServiceDefinition.",
      "properties": {
        "api_definition_id": {
          "type": "string",
          "x-go-name": "APIDefinitionID"
        },
        "api_definition_name": {
          "type": "string",
          "x-go-name": "APIDefinitionName"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "default_api": {
          "type": "boolean",
          "x-go-name": "DefaultAPI"
        },
        "definition": {
          "type": "object",
          "additionalProperties": {},
          "x-go-name": "Definition"
        },
        "doc_type": {
          "type": "string",
          "x-go-name": "Doctype"
        },
        "editor_handle": {
          "type": "string",
          "x-go-name": "EditorHandle"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "schema_version": {
          "type": "string",
          "x-go-name": "SchemaVersion"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Updated"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "APIMethod": {
      "type": "object",
      "title": "APIMethod is a view that represents a ServiceDefinitionMethod.",
      "properties": {
        "api_definition_id": {
          "type": "string",
          "x-go-name": "APIDefinitionID"
        },
        "api_endpoint_id": {
          "type": "string",
          "x-go-name": "APIEndpointID"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "sample_json_response": {
          "type": "string",
          "x-go-name": "SampleJsonResponse"
        },
        "sample_xml_response": {
          "type": "string",
          "x-go-name": "SampleXmlResponse"
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Updated"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "APIOrganization": {
      "type": "object",
      "title": "APIOrganization is a view that represents a Organization.",
      "properties": {
        "children": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SubOrganizations"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "parent_id": {
          "type": "string",
          "x-go-name": "Parent"
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Updated"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "APIPackage": {
      "type": "object",
      "title": "APIPackage is a view that represents data from the Package model.",
      "properties": {
        "created": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "generate_shared_secret": {
          "type": "boolean",
          "x-go-name": "GenerateSharedSecret"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "key_length": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "KeyLength"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "org_id": {
          "type": "string",
          "x-go-name": "OrganizationID"
        },
        "org_name": {
          "type": "string",
          "x-go-name": "OrganizationName"
        },
        "shared_secret_length": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SharedSecretLength"
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Updated"
        },
        "uuid": {
          "type": "string",
          "x-go-name": "UUID"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "APIPackageKey": {
      "type": "object",
      "title": "APIPackageKey is a view that represents PackageKey models.",
      "properties": {
        "apikey": {
          "type": "string",
          "x-go-name": "Apikey"
        },
        "app_id": {
          "type": "string",
          "x-go-name": "AppID"
        },
        "app_name": {
          "type": "string",
          "x-go-name": "AppName"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "customAPIKey": {
          "type": "boolean",
          "x-go-name": "CustomAPIKey"
        },
        "eav": {
          "type": "string",
          "x-go-name": "Eav"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "member_id": {
          "type": "string",
          "x-go-name": "MemberID"
        },
        "member_username": {
          "type": "string",
          "x-go-name": "MemberUsername"
        },
        "package_id": {
          "type": "string",
          "x-go-name": "PackageID"
        },
        "package_name": {
          "type": "string",
          "x-go-name": "PackageName"
        },
        "plan_id": {
          "type": "string",
          "x-go-name": "PlanID"
        },
        "plan_name": {
          "type": "string",
          "x-go-name": "PlanName"
        },
        "plan_rate_limit_quota": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PlanQuota"
        },
        "plan_rate_limit_quota_period": {
          "type": "string",
          "x-go-name": "PlanQuotaPeriod"
        },
        "plan_rate_limit_throttle": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PlanThrottle"
        },
        "qps_limit_ceiling": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "QPSLimitCeiling"
        },
        "qps_limit_exempt": {
          "type": "boolean",
          "x-go-name": "QPSLimitExempt"
        },
        "qps_limit_type": {
          "type": "string",
          "x-go-name": "QPSLimitType"
        },
        "rate_limit_ceiling": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RateLimitCeiling"
        },
        "rate_limit_exempt": {
          "type": "boolean",
          "x-go-name": "RateLimitExempt"
        },
        "rate_limit_type": {
          "type": "string",
          "x-go-name": "RateLimitType"
        },
        "secret": {
          "type": "string",
          "x-go-name": "Secret"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Updated"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "APIPlan": {
      "type": "object",
      "title": "APIPlan is a view that represents data from the Plan model.",
      "properties": {
        "admin_key_provisioning": {
          "type": "boolean",
          "x-go-name": "AdminKeyProvisioning"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "email_template_set_id": {
          "type": "string",
          "x-go-name": "EmailTemplateSetId"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "maximum_keys_allowed": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MaximumKeysAllowed"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "number_of_keys_before_review": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NumberOfKeysBeforeReview"
        },
        "package_id": {
          "type": "string",
          "x-go-name": "PackageID"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Roles"
        },
        "self_service_key_provisioning": {
          "type": "boolean",
          "x-go-name": "SelfServiceKeyProvisioning"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Updated"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "APIPlanDefinition": {
      "type": "object",
      "title": "APIPlanDefinition is a view that represents data from a Plan Service model.",
      "properties": {
        "api_definition_id": {
          "type": "string",
          "x-go-name": "APIDefinitionID"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "package_id": {
          "type": "string",
          "x-go-name": "PackageID"
        },
        "plan_id": {
          "type": "string",
          "x-go-name": "PlanID"
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Updated"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "APIPlanEmailTemplate": {
      "type": "object",
      "title": "APIPlanEmailTemplate is a model that represents a EmailTemplate.",
      "properties": {
        "body": {
          "type": "string",
          "x-go-name": "Body"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "email_template_set_id": {
          "type": "string",
          "x-go-name": "EmailTemplateSetId"
        },
        "from": {
          "type": "string",
          "x-go-name": "From"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "subject": {
          "type": "string",
          "x-go-name": "Subject"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Updated"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "APIPlanEmailTemplateSet": {
      "type": "object",
      "title": "APIPlanEmailTemplateSet is a model that represents a EmailTemplateSet.",
      "properties": {
        "created": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Updated"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "APIPlanEmailTemplates": {
      "type": "object",
      "title": "APIPlanEmailTemplates is a collection of APIEmailTemplate models.",
      "properties": {
        "collection": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/APIPlanEmailTemplate"
          },
          "x-go-name": "APIPlanEmailTemplates"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Limit"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Offset"
        },
        "query": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Search"
        },
        "sort": {
          "type": "string",
          "x-go-name": "Sort"
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Total"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "APIPlanEmailTemplatesSet": {
      "type": "object",
      "title": "APIPlanEmailTemplatesSet is a collection of APIEmailTemplate models.",
      "properties": {
        "collection": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/APIPlanEmailTemplateSet"
          },
          "x-go-name": "APIPlanEmailTemplatesSet"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Limit"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Offset"
        },
        "query": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Search"
        },
        "sort": {
          "type": "string",
          "x-go-name": "Sort"
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Total"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "APIPlanEndpoint": {
      "type": "object",
      "title": "APIPlanEndpoint is a view that represents data from a PlanEndpoint model.",
      "properties": {
        "allow_undefined_methods": {
          "type": "boolean",
          "x-go-name": "AllowUndefinedMethods"
        },
        "api_definition_endpoint_id": {
          "type": "string",
          "x-go-name": "APIEndpointID"
        },
        "api_definition_id": {
          "type": "string",
          "x-go-name": "APIDefinitionID"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "package_id": {
          "type": "string",
          "x-go-name": "PackageID"
        },
        "plan_id": {
          "type": "string",
          "x-go-name": "PlanID"
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Updated"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "APIPlanMethod": {
      "type": "object",
      "title": "APIPlanMethod is a view that represents data from a PlanMethod model.",
      "properties": {
        "api_definition_endpoint_id": {
          "type": "string",
          "x-go-name": "APIEndpointID"
        },
        "api_definition_id": {
          "type": "string",
          "x-go-name": "APIDefinitionID"
        },
        "api_definition_method_id": {
          "type": "string",
          "x-go-name": "APIMethodID"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "package_id": {
          "type": "string",
          "x-go-name": "PackageID"
        },
        "plan_id": {
          "type": "string",
          "x-go-name": "PlanID"
        },
        "qps_limit_ceiling": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "QPSLimitCeiling"
        },
        "qps_limit_exempt": {
          "type": "boolean",
          "x-go-name": "QPSLimitExempt"
        },
        "rate_limit_ceiling": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RateLimitCeiling"
        },
        "rate_limit_exempt": {
          "type": "boolean",
          "x-go-name": "RateLimitExempt"
        },
        "rate_limit_period": {
          "type": "string",
          "x-go-name": "RateLimitPeriod"
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Updated"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "APIPlanRateLimit": {
      "type": "object",
      "title": "APIPlanRateLimit is a view that represents data from a Plan model.",
      "properties": {
        "allow_package_key_quota_override": {
          "type": "boolean",
          "x-go-name": "AllowPackageKeyQuotaOverride"
        },
        "allow_package_key_throttle_override": {
          "type": "boolean",
          "x-go-name": "AllowPackageKeyThrottleOverride"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "package_id": {
          "type": "string",
          "x-go-name": "PackageID"
        },
        "quota": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Quota"
        },
        "quota_period": {
          "type": "string",
          "x-go-name": "QuotaPeriod"
        },
        "throttle": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Throttle"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "APIResponseFilter": {
      "type": "object",
      "title": "APIResponseFilter is a view that represents a ServiceDefinitionResponseFilters.",
      "properties": {
        "api_definition_id": {
          "type": "string",
          "x-go-name": "APIDefinitionID"
        },
        "api_endpoint_id": {
          "type": "string",
          "x-go-name": "APIEndpointID"
        },
        "api_method_id": {
          "type": "string",
          "x-go-name": "APIMethodID"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "json_filter_fields": {
          "type": "string",
          "x-go-name": "JSONFilterFields"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "notes": {
          "type": "string",
          "x-go-name": "Notes"
        },
        "sample_json_response": {
          "type": "string",
          "x-go-name": "SampleJsonResponse"
        },
        "sample_xml_response": {
          "type": "string",
          "x-go-name": "SampleXmlResponse"
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Updated"
        },
        "xml_filter_fields": {
          "type": "string",
          "x-go-name": "XMLFilterFields"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "APIRole": {
      "type": "object",
      "title": "APIRole is a model that represents a Roles.",
      "properties": {
        "api_organization_id": {
          "type": "string",
          "x-go-name": "OrganizationID"
        },
        "api_organization_name": {
          "type": "string",
          "x-go-name": "OrganizationName"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "member_assignable": {
          "type": "boolean",
          "x-go-name": "MemberAssignable"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "predefined": {
          "type": "boolean",
          "x-go-name": "Predefined"
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Updated"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "APIRoles": {
      "type": "object",
      "title": "APIRoles is a collection of APIRole models.",
      "properties": {
        "collection": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/APIRole"
          },
          "x-go-name": "APIRoles"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Limit"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Offset"
        },
        "query": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Search"
        },
        "sort": {
          "type": "string",
          "x-go-name": "Sort"
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Total"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "APIScheduledMaintenanceEvent": {
      "type": "object",
      "title": "APIScheduledMaintenanceEvent is a model that represents a ScheduleMaintenance.",
      "properties": {
        "created": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "end_time": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "EndTime"
        },
        "endpoints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/APIScheduledMaintenanceEventEndpoint"
          },
          "x-go-name": "Endpoints"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "start_time": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "StartTime"
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Updated"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "APIScheduledMaintenanceEventEndpoint": {
      "type": "object",
      "title": "APIScheduledMaintenanceEventEndpoint is a model that represents a ScheduleMaintenanceEndpoints.",
      "properties": {
        "api_definition_endpoint_id": {
          "type": "string",
          "x-go-name": "APIEndpointID"
        },
        "api_definition_id": {
          "type": "string",
          "x-go-name": "APIDefinitionID"
        },
        "api_schedule_maintenance_id": {
          "type": "string",
          "x-go-name": "APIScheduledMaintenanceEventID"
        },
        "api_schedule_maintenance_name": {
          "type": "string",
          "x-go-name": "APIScheduledMaintenanceEventName"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Updated"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "App": {
      "type": "object",
      "title": "App is a view that represents the MemberApp model.",
      "properties": {
        "created": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "eav": {
          "type": "string",
          "x-go-name": "Eav"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "member_id": {
          "type": "string",
          "x-go-name": "MemberID"
        },
        "member_username": {
          "type": "string",
          "x-go-name": "MemberUsername"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "oauth_redirect_uri": {
          "type": "string",
          "x-go-name": "OAuthRedirectURI"
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Updated"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "ApplicationsUsage": {
      "description": "ApplicationUsage information of Applications",
      "type": "object",
      "properties": {
        "area_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AreaID"
        },
        "handle": {
          "type": "string",
          "x-go-name": "Handle"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "is_packaged": {
          "type": "boolean",
          "x-go-name": "IsPackaged"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        },
        "time": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Time"
        },
        "updated": {
          "type": "string",
          "x-go-name": "Updated"
        },
        "uuid": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "UUID"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "Area": {
      "type": "object",
      "title": "Area Represents the area.",
      "properties": {
        "created": {
          "type": "string",
          "x-go-name": "Created"
        },
        "defaultLocale": {
          "type": "string",
          "x-go-name": "DefaultLocale"
        },
        "email_templates": {
          "$ref": "#/definitions/EmailTemplate"
        },
        "footer": {
          "type": "string",
          "x-go-name": "Footer"
        },
        "id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "IDForSerialization"
        },
        "isMultiLocale": {
          "type": "boolean",
          "x-go-name": "IsMultiLocale"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "owner_handle": {
          "type": "string",
          "x-go-name": "OwnerHandle"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        },
        "subj": {
          "type": "string",
          "x-go-name": "Subj"
        },
        "summary": {
          "type": "string",
          "x-go-name": "Summary"
        },
        "updated": {
          "type": "string",
          "x-go-name": "Updated"
        },
        "uuid": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "UUID"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "AreaConfig": {
      "type": "object",
      "title": "AreaConfig is a view that represents the AreaConfig model and related EAV xml data.",
      "properties": {
        "area_id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "AreaID"
        },
        "area_uuid": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "AreaUUID"
        },
        "area_wide_qps_limit": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AreaWideQPSLimit"
        },
        "body_file_css": {
          "type": "string",
          "x-go-name": "BodyFileCSS"
        },
        "body_file_js": {
          "type": "string",
          "x-go-name": "BodyFileJS"
        },
        "body_inline_css": {
          "type": "string",
          "x-go-name": "BodyInlineCSS"
        },
        "body_inline_js": {
          "type": "string",
          "x-go-name": "BodyInlineJS"
        },
        "button_text": {
          "type": "string",
          "x-go-name": "ButtonText"
        },
        "content_security_policy": {
          "type": "string",
          "x-go-name": "CSP"
        },
        "cors": {
          "type": "string",
          "x-go-name": "CORS"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "failsafe_timeout_count": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FailsafeTimeoutCount"
        },
        "failsafe_timeout_period": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FailsafeTimeoutPeriod"
        },
        "head_file_css": {
          "type": "string",
          "x-go-name": "HeadFileCSS"
        },
        "head_file_js": {
          "type": "string",
          "x-go-name": "HeadFileJS"
        },
        "head_inline_css": {
          "type": "string",
          "x-go-name": "HeadInlineCSS"
        },
        "head_inline_js": {
          "type": "string",
          "x-go-name": "HeadInlineJS"
        },
        "id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ID"
        },
        "ldap_bind_password": {
          "type": "string",
          "x-go-name": "LDAPBindPassword"
        },
        "ldap_bind_username": {
          "type": "string",
          "x-go-name": "LDAPBindUsername"
        },
        "ldap_button_text": {
          "type": "string",
          "x-go-name": "LDAPButtonText"
        },
        "ldap_enabled": {
          "type": "boolean",
          "x-go-name": "LDAPEnabled"
        },
        "ldap_skip_verify": {
          "type": "boolean",
          "x-go-name": "LDAPSkipVerify"
        },
        "ldap_start_tls": {
          "type": "boolean",
          "x-go-name": "LDAPStartTLS"
        },
        "ldap_url": {
          "type": "string",
          "x-go-name": "LDAPURL"
        },
        "logo_url": {
          "type": "string",
          "x-go-name": "LogoURL"
        },
        "min_password_duration": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MinPasswordDuration"
        },
        "saml_button_text": {
          "type": "string",
          "x-go-name": "SAMLButtonText"
        },
        "saml_certificate_data": {
          "type": "string",
          "x-go-name": "SAMLCertificateData"
        },
        "saml_certificate_filename": {
          "type": "string",
          "x-go-name": "SAMLCertificateFilename"
        },
        "saml_enabled": {
          "type": "boolean",
          "x-go-name": "SAMLEnabled"
        },
        "saml_force_authentication": {
          "type": "boolean",
          "x-go-name": "SAMLForceAuthentication"
        },
        "saml_key_data": {
          "type": "string",
          "x-go-name": "SAMLKeyData"
        },
        "saml_key_filename": {
          "type": "string",
          "x-go-name": "SAMLKeyFilename"
        },
        "saml_metadata_url": {
          "type": "string",
          "x-go-name": "SAMLMetadataURL"
        },
        "saml_root_url": {
          "type": "string",
          "x-go-name": "SAMLRootURL"
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "AreaUsage": {
      "description": "AreaUsage information for area usage",
      "type": "object",
      "properties": {
        "area_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AreaID"
        },
        "handle": {
          "type": "string",
          "x-go-name": "Handle"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        },
        "time": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Time"
        },
        "updated": {
          "type": "string",
          "x-go-name": "Updated"
        },
        "uuid": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "UUID"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "EmailTemplate": {
      "type": "object",
      "properties": {
        "admin_email_notify_app_reg": {
          "type": "string",
          "x-go-name": "AdminEmailNotifyAppReg"
        },
        "admin_email_notify_call_inspector": {
          "type": "string",
          "x-go-name": "AdminEmailNotifyCallInspector"
        },
        "admin_email_notify_key_reg": {
          "type": "string",
          "x-go-name": "AdminEmailNotifyKeyReg"
        },
        "admin_email_notify_member_reg": {
          "type": "string",
          "x-go-name": "AdminEmailNotifyMemberReg"
        },
        "app_reg_body": {
          "type": "string",
          "x-go-name": "AppRegBody"
        },
        "app_reg_subj": {
          "type": "string",
          "x-go-name": "AppRegSubj"
        },
        "bcc_app_email": {
          "type": "string",
          "x-go-name": "BccAppEmail"
        },
        "bcc_app_from_email": {
          "type": "string",
          "x-go-name": "BccAppFromEmail"
        },
        "bcc_app_from_name": {
          "type": "string",
          "x-go-name": "BccAppFromName"
        },
        "bcc_key_email": {
          "type": "string",
          "x-go-name": "BccKeyEmail"
        },
        "bcc_key_from_email": {
          "type": "string",
          "x-go-name": "BccKeyFromEmail"
        },
        "bcc_key_from_name": {
          "type": "string",
          "x-go-name": "BccKeyFromName"
        },
        "bcc_member_email": {
          "type": "string",
          "x-go-name": "BccMemberEmail"
        },
        "bcc_member_from_email": {
          "type": "string",
          "x-go-name": "BccMemberFromEmail"
        },
        "bcc_member_from_name": {
          "type": "string",
          "x-go-name": "BccMemberFromName"
        },
        "key_reg_body": {
          "type": "string",
          "x-go-name": "KeyRegBody"
        },
        "key_reg_subj": {
          "type": "string",
          "x-go-name": "KeyRegSubj"
        },
        "member_reg_body": {
          "type": "string",
          "x-go-name": "MemberRegBody"
        },
        "member_reg_subj": {
          "type": "string",
          "x-go-name": "MemberRegSubj"
        },
        "notify_email": {
          "type": "string",
          "x-go-name": "NotifyEmail"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "Folder": {
      "description": "Folder represents a folder object",
      "type": "object",
      "properties": {
        "content": {
          "type": "string",
          "x-go-name": "Content"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "created_by": {
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "UUID"
        },
        "is_online": {
          "type": "boolean",
          "x-go-name": "IsOnline"
        },
        "org_id": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "OrgUUID"
        },
        "pages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Page"
          },
          "x-go-name": "Pages"
        },
        "parent_id": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "ParentID"
        },
        "path": {
          "type": "string",
          "x-go-name": "Path"
        },
        "position": {
          "$ref": "#/definitions/Position"
        },
        "published": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "PublishedAt"
        },
        "published_by": {
          "type": "string",
          "x-go-name": "PublishedBy"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid"
          },
          "x-go-name": "Roles"
        },
        "state": {
          "type": "string",
          "x-go-name": "State"
        },
        "sub_folders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Folder"
          },
          "x-go-name": "SubFolders"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "updated_by": {
          "type": "string",
          "x-go-name": "EditedBy"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "Member": {
      "description": "Member is a view representing the underlying member models in the database",
      "type": "object",
      "properties": {
        "company": {
          "type": "string",
          "x-go-name": "Company"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "display_name": {
          "type": "string",
          "x-go-name": "DisplayName"
        },
        "email": {
          "type": "string",
          "x-go-name": "Email"
        },
        "first_name": {
          "type": "string",
          "x-go-name": "FirstName"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "last_name": {
          "type": "string",
          "x-go-name": "LastName"
        },
        "password": {
          "type": "string",
          "x-go-name": "Password"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Roles"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Updated"
        },
        "username": {
          "type": "string",
          "x-go-name": "Username"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "MemberApp": {
      "type": "object",
      "title": "MemberApp is a view that represents the MemberApp model.",
      "properties": {
        "ads": {
          "type": "string",
          "x-go-name": "Ads"
        },
        "adsSystem": {
          "type": "string",
          "x-go-name": "AdsSystem"
        },
        "applicationName": {
          "type": "string",
          "x-go-name": "Name"
        },
        "areaID": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "AreaID"
        },
        "commercial": {
          "type": "string",
          "x-go-name": "Commercial"
        },
        "created": {
          "type": "string",
          "x-go-name": "Created"
        },
        "eav": {
          "type": "string",
          "x-go-name": "Eav"
        },
        "externalID": {
          "type": "string",
          "x-go-name": "ExternalID"
        },
        "howDidYouHear": {
          "type": "string",
          "x-go-name": "HowDidYouHear"
        },
        "isPackaged": {
          "type": "string",
          "x-go-name": "IsPackaged"
        },
        "notes": {
          "type": "string",
          "x-go-name": "Notes"
        },
        "oauthRedirectUri": {
          "type": "string",
          "x-go-name": "OauthRedirectURI"
        },
        "packageKeys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageKey"
          },
          "x-go-name": "PackageKeys"
        },
        "preferredOutput": {
          "type": "string",
          "x-go-name": "PreferredOutput"
        },
        "preferredProtocol": {
          "type": "string",
          "x-go-name": "PreferredProtocol"
        },
        "prefs": {
          "type": "string",
          "x-go-name": "Prefs"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        },
        "summary": {
          "type": "string",
          "x-go-name": "Summ"
        },
        "tags": {
          "type": "string",
          "x-go-name": "Tags"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "updated": {
          "type": "string",
          "x-go-name": "Updated"
        },
        "uri": {
          "type": "string",
          "x-go-name": "URI"
        },
        "usageModel": {
          "type": "string",
          "x-go-name": "UsageModel"
        },
        "username": {
          "type": "string",
          "x-go-name": "Handle"
        },
        "uuid": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "UUID"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "MemberApps": {
      "description": "MemberApps is a slice of App structs",
      "type": "array",
      "items": {
        "$ref": "#/definitions/MemberApp"
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "Package": {
      "type": "object",
      "title": "Package is a view that represents the Package model.",
      "properties": {
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "packageKeyUUID": {
          "type": "string",
          "x-go-name": "PackageKeyUUID"
        },
        "planUUID": {
          "type": "string",
          "x-go-name": "PlanUUUID"
        },
        "plans": {
          "$ref": "#/definitions/Plans"
        },
        "uuid": {
          "type": "string",
          "x-go-name": "UUID"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "PackageKey": {
      "description": "PackageKey is the model for one package_keys row in the DB",
      "type": "object",
      "properties": {
        "apikey": {
          "type": "string",
          "x-go-name": "APIKey"
        },
        "app_id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "AppID"
        },
        "application": {
          "$ref": "#/definitions/MemberApp"
        },
        "area_id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "AreaID"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "eav": {
          "type": "string",
          "x-go-name": "Eav"
        },
        "package": {
          "$ref": "#/definitions/Package"
        },
        "package_id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "PackageID"
        },
        "plan": {
          "$ref": "#/definitions/Plan"
        },
        "plan_id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "PlanID"
        },
        "qps_limit_ceiling": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "QPSLimitCeiling"
        },
        "qps_limit_exempt": {
          "type": "boolean",
          "x-go-name": "QPSLimitExempt"
        },
        "rate_limit_ceiling": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RateLimitCeiling"
        },
        "rate_limit_exempt": {
          "type": "boolean",
          "x-go-name": "RateLimitExempt"
        },
        "secret": {
          "type": "string",
          "x-go-name": "Secret"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "username": {
          "type": "string",
          "x-go-name": "Handle"
        },
        "uuid": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "UUID"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "PackageKeys": {
      "description": "PackageKeys is a slice of PackageKey structs",
      "type": "array",
      "items": {
        "$ref": "#/definitions/PackageKey"
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "PackageKeysUsage": {
      "description": "PackageKeysUsage information of Package Keys",
      "type": "object",
      "properties": {
        "apikey": {
          "type": "string",
          "x-go-name": "APIKey"
        },
        "app_id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "AppID"
        },
        "area_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AreaID"
        },
        "handle": {
          "type": "string",
          "x-go-name": "Handle"
        },
        "plan_id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "PlanID"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        },
        "time": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Time"
        },
        "updated": {
          "type": "string",
          "x-go-name": "Updated"
        },
        "uuid": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "UUID"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "Page": {
      "description": "Page represents content page",
      "type": "object",
      "properties": {
        "content": {
          "type": "string",
          "x-go-name": "Content"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "created_by": {
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "UUID"
        },
        "is_online": {
          "type": "boolean",
          "x-go-name": "IsOnline"
        },
        "org_id": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "OrgUUID"
        },
        "parent_id": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "ParentID"
        },
        "path": {
          "type": "string",
          "x-go-name": "Path"
        },
        "position": {
          "$ref": "#/definitions/Position"
        },
        "published": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "PublishedAt"
        },
        "published_by": {
          "type": "string",
          "x-go-name": "PublishedBy"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid"
          },
          "x-go-name": "Roles"
        },
        "state": {
          "type": "string",
          "x-go-name": "State"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "updated_by": {
          "type": "string",
          "x-go-name": "EditedBy"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "Perspective": {
      "description": "Perspective represents perspective data",
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "orgid": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "OrgID"
        },
        "parent": {
          "type": "string",
          "x-go-name": "Parent"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "Plan": {
      "type": "object",
      "title": "Plan is a view that represents the Plan model.",
      "properties": {
        "areaId": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "AreaID"
        },
        "created": {
          "type": "string",
          "x-go-name": "Created"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "eav": {
          "type": "string",
          "x-go-name": "Eav"
        },
        "emailTemplateSetId": {
          "type": "string",
          "x-go-name": "EmailTemplateSetID"
        },
        "id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ID"
        },
        "isModerated": {
          "type": "string",
          "x-go-name": "IsModerated"
        },
        "isPublic": {
          "type": "string",
          "x-go-name": "IsPublic"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "notes": {
          "type": "string",
          "x-go-name": "Notes"
        },
        "orderMax": {
          "type": "string",
          "x-go-name": "OrderMax"
        },
        "orderModerationThreshold": {
          "type": "string",
          "x-go-name": "OrderModerationThreshold"
        },
        "packageId": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "PackageID"
        },
        "qpsLimitCeiling": {
          "type": "string",
          "x-go-name": "QPSLimitCeiling"
        },
        "qpsLimitExempt": {
          "type": "string",
          "x-go-name": "QPSLimitExempt"
        },
        "qpsLimitKeyOverrideAllowed": {
          "type": "string",
          "x-go-name": "QPSLimitKeyOverrideAllowed"
        },
        "qpsLimitOrderOverrideAllowed": {
          "type": "string",
          "x-go-name": "QPSLimitOrderOverrideAllowed"
        },
        "rateLimitCeiling": {
          "type": "string",
          "x-go-name": "RateLimitCeiling"
        },
        "rateLimitExempt": {
          "type": "string",
          "x-go-name": "RateLimitExempt"
        },
        "rateLimitKeyOverrideAllowed": {
          "type": "string",
          "x-go-name": "RateLimitKeyOverrideAllowed"
        },
        "rateLimitOrderOverrideAllowed": {
          "type": "string",
          "x-go-name": "RateLimitOrderOverrideAllowed"
        },
        "rateLimitPeriod": {
          "type": "string",
          "x-go-name": "RateLimitPeriod"
        },
        "responseFilterOverrideAllowed": {
          "type": "string",
          "x-go-name": "ResponseFilterOverrideAllowed"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        },
        "updated": {
          "type": "string",
          "x-go-name": "Updated"
        },
        "uuid": {
          "type": "string",
          "x-go-name": "UUID"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "Plans": {
      "description": "Plans is a slice of Plan structs",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Plan"
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "PortalDomain": {
      "type": "object",
      "title": "PortalDomain is a struct representing a domain model exposed to the Admin UI for Portal Domain settings.",
      "properties": {
        "captcha_key": {
          "type": "string",
          "x-go-name": "CaptchaKey"
        },
        "captcha_secret": {
          "type": "string",
          "x-go-name": "CaptchaSecret"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "enable_captcha": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "EnableCaptcha"
        },
        "id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "primary": {
          "type": "boolean",
          "x-go-name": "Primary"
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "PortalNav": {
      "description": "PortalNav represents portal navigation items",
      "type": "object",
      "properties": {
        "area_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AreaID"
        },
        "content_id": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "ContentID"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "created_by": {
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "UUID"
        },
        "is_online": {
          "type": "boolean",
          "x-go-name": "IsOnline"
        },
        "open_new_tab": {
          "type": "boolean",
          "x-go-name": "OpenInNewTab"
        },
        "parent_id": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "ParentID"
        },
        "path": {
          "type": "string",
          "x-go-name": "Path"
        },
        "position": {
          "$ref": "#/definitions/Position"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid"
          },
          "x-go-name": "Roles"
        },
        "sequence_num": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SequenceNum"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "updated_by": {
          "type": "string",
          "x-go-name": "EditedBy"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "PortalNavList": {
      "description": "PortalNavList represents portal navigation items for portal consumption",
      "type": "object",
      "properties": {
        "content_id": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "ContentID"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "UUID"
        },
        "open_new_tab": {
          "type": "boolean",
          "x-go-name": "OpenInNewTab"
        },
        "parent_id": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "ParentID"
        },
        "path": {
          "type": "string",
          "x-go-name": "Path"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid"
          },
          "x-go-name": "Roles"
        },
        "sequence_num": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SequenceNum"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "PortalNavReq": {
      "description": "PortalNavReq represents portal navigation items for swagger input",
      "type": "object",
      "properties": {
        "content_id": {
          "type": "string",
          "x-go-name": "ContentID"
        },
        "open_new_tab": {
          "type": "boolean",
          "x-go-name": "OpenInNewTab"
        },
        "path": {
          "type": "string",
          "x-go-name": "Path"
        },
        "position": {
          "$ref": "#/definitions/PositionSwagger"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Roles"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "Position": {
      "description": "above or below a particular object",
      "type": "object",
      "title": "Position used to indicate relative position of the asset within the folder.",
      "properties": {
        "object_id": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "ObjectID"
        },
        "rel": {
          "type": "string",
          "x-go-name": "Rel"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "PositionSwagger": {
      "description": "PositionSwagger represents position items for swagger input",
      "type": "object",
      "properties": {
        "object_id": {
          "type": "string",
          "x-go-name": "ObjectID"
        },
        "rel": {
          "type": "string",
          "x-go-name": "Rel"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "RolesUsage": {
      "description": "RolesUsage Information of roles",
      "type": "object",
      "properties": {
        "area_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AreaID"
        },
        "handle": {
          "type": "string",
          "x-go-name": "Handle"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "role_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RoleID"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        },
        "time": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Time"
        },
        "updated": {
          "type": "string",
          "x-go-name": "Updated"
        },
        "uuid": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "UUID"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "ServiceMapisUsage": {
      "description": "ServiceMapisUsage information of Service Mapis",
      "type": "object",
      "properties": {
        "app_id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "AppID"
        },
        "area_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AreaID"
        },
        "handle": {
          "type": "string",
          "x-go-name": "Handle"
        },
        "mapi": {
          "type": "string",
          "x-go-name": "Mapi"
        },
        "spkey": {
          "type": "string",
          "x-go-name": "SPKey"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        },
        "time": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Time"
        },
        "updated": {
          "type": "string",
          "x-go-name": "Updated"
        },
        "uuid": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "UUID"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "SiteMapResponse": {
      "description": "SiteMapResponse represents each sitemap content object response for config manager",
      "type": "object",
      "properties": {
        "author": {
          "type": "string",
          "x-go-name": "EditedBy"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "folder_id": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "FolderID"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "ObjectID"
        },
        "page_id": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "PageID"
        },
        "parent_id": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "ParentID"
        },
        "path": {
          "type": "string",
          "x-go-name": "Path"
        },
        "position": {
          "$ref": "#/definitions/Position"
        },
        "sequence_num": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SequenceNum"
        },
        "sitemap_id": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "SitemapID"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Updated"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "StatusSummary": {
      "description": "StatusSummary generic status-wise summary model",
      "type": "object",
      "properties": {
        "active_count": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Active"
        },
        "deleted_count": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Deleted"
        },
        "total_count": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalCount"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "Swagger": {
      "type": "object",
      "title": "Swagger is a model that represents a swagger.",
      "properties": {
        "definition": {
          "type": "object",
          "additionalProperties": {},
          "x-go-name": "Definition"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        },
        "url": {
          "type": "string",
          "x-go-name": "URL"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "User": {
      "type": "object",
      "title": "User represents the logged in user mapped from an underlying SQL database.",
      "properties": {
        "address1": {
          "type": "string",
          "x-go-name": "Address1"
        },
        "address2": {
          "type": "string",
          "x-go-name": "Address2"
        },
        "areaStatus": {
          "type": "string",
          "x-go-name": "AreaStatus"
        },
        "blog": {
          "type": "string",
          "x-go-name": "Blog"
        },
        "company": {
          "type": "string",
          "x-go-name": "Company"
        },
        "countryCode": {
          "type": "string",
          "x-go-name": "CountryCode"
        },
        "created": {
          "type": "string",
          "x-go-name": "Created"
        },
        "displayName": {
          "type": "string",
          "x-go-name": "Moniker"
        },
        "email": {
          "type": "string",
          "x-go-name": "Email"
        },
        "firstName": {
          "type": "string",
          "x-go-name": "FirstName"
        },
        "im": {
          "type": "string",
          "x-go-name": "Im"
        },
        "imsvc": {
          "type": "string",
          "x-go-name": "Imsvc"
        },
        "lastName": {
          "type": "string",
          "x-go-name": "LastName"
        },
        "locality": {
          "type": "string",
          "x-go-name": "CityOrTown"
        },
        "oldPassword": {
          "type": "string",
          "x-go-name": "OldPassword"
        },
        "password": {
          "type": "string",
          "x-go-name": "Password"
        },
        "phone": {
          "type": "string",
          "x-go-name": "Phone"
        },
        "postalCode": {
          "type": "string",
          "x-go-name": "ZipCode"
        },
        "recaptcha_token": {
          "type": "string",
          "x-go-name": "RecaptchaToken"
        },
        "region": {
          "type": "string",
          "x-go-name": "StateProvinceAbbr"
        },
        "sso": {
          "type": "string",
          "x-go-name": "SSO"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        },
        "updated": {
          "type": "string",
          "x-go-name": "Updated"
        },
        "uri": {
          "type": "string",
          "x-go-name": "URI"
        },
        "username": {
          "type": "string",
          "x-go-name": "Handle"
        },
        "uuid": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "UUID"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "UserUsage": {
      "description": "UserUsage information of users",
      "type": "object",
      "properties": {
        "area_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AreaID"
        },
        "handle": {
          "type": "string",
          "x-go-name": "Handle"
        },
        "registration_area_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RegistrationAreaID"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        },
        "time": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Time"
        },
        "updated": {
          "type": "string",
          "x-go-name": "Updated"
        },
        "uuid": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "UUID"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    },
    "UserUsageSummary": {
      "description": "UserUsageSummary summary model",
      "type": "object",
      "properties": {
        "applications": {
          "$ref": "#/definitions/StatusSummary"
        },
        "areas": {
          "$ref": "#/definitions/StatusSummary"
        },
        "package_keys": {
          "$ref": "#/definitions/StatusSummary"
        },
        "roles": {
          "$ref": "#/definitions/StatusSummary"
        },
        "service_mapis": {
          "$ref": "#/definitions/StatusSummary"
        },
        "users": {
          "$ref": "#/definitions/StatusSummary"
        }
      },
      "x-go-package": "stash.mashery.com/eng/mlconfig/models"
    }
  },
  "responses": {
    "APIClientTrustCertificateResp": {
      "description": "HTTP status code 200 for retrieving APIClientTrustCertificate",
      "schema": {
        "type": "object",
        "properties": {
          "created": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Created"
          },
          "id": {
            "type": "string",
            "x-go-name": "ID"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Updated"
          }
        }
      }
    },
    "APIClientTrustCertificatesResp": {
      "description": "HTTP status code 200 for retrieving APIClientTrustCertificates",
      "schema": {
        "type": "object",
        "properties": {
          "collection": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/APIClientTrustCertificate"
            },
            "x-go-name": "APIClientTrustCertificates"
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit"
          },
          "offset": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Offset"
          },
          "query": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "x-go-name": "Search"
          },
          "sort": {
            "type": "string",
            "x-go-name": "Sort"
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Total"
          }
        }
      }
    },
    "APIDefinitionPerformanceAccelerationResp": {
      "description": "HTTP status code 200 for retrieving APIDefinitionPerformanceAccelerationResp",
      "schema": {
        "$ref": "#/definitions/APIDefinitionPerformanceAcceleration"
      }
    },
    "APIDefinitionResp": {
      "description": "HTTP status code 200 for retrieving api definition list",
      "schema": {
        "type": "object",
        "properties": {
          "api_domain_id": {
            "type": "string",
            "x-go-name": "APIDomainID"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Created"
          },
          "cross_domain_policy": {
            "type": "string",
            "x-go-name": "CrossDomainPolicy"
          },
          "description": {
            "type": "string",
            "x-go-name": "Description"
          },
          "id": {
            "type": "string",
            "x-go-name": "ID"
          },
          "identifier": {
            "type": "string",
            "x-go-name": "Identifier"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "org_id": {
            "type": "string",
            "x-go-name": "OrganizationID"
          },
          "org_name": {
            "type": "string",
            "x-go-name": "OrganizationName"
          },
          "qps_limit_overall": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "QPSLimitOverall"
          },
          "rfc_3986_encoded": {
            "type": "boolean",
            "x-go-name": "RFC3986Encoded"
          },
          "robots_policy": {
            "type": "string",
            "x-go-name": "RobotsPolicy"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Roles"
          },
          "swagger_json": {
            "type": "object",
            "additionalProperties": {},
            "x-go-name": "SwaggerJSON"
          },
          "swagger_uri": {
            "type": "string",
            "x-go-name": "SwaggerURI"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Updated"
          },
          "version": {
            "type": "string",
            "x-go-name": "Version"
          }
        }
      }
    },
    "APIDefinitionSecurityResp": {
      "description": "HTTP status code 200 for retrieving APIDefinitionSecurityResp",
      "schema": {
        "$ref": "#/definitions/APIDefinitionSecurity"
      }
    },
    "APIDefinitionsResp": {
      "description": "HTTP status code 200 for retrieving api definitions list",
      "schema": {
        "type": "object",
        "properties": {
          "collection": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/APIDefinition"
            },
            "x-go-name": "APIDefinitions"
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit"
          },
          "offset": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Offset"
          },
          "query": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "x-go-name": "Search"
          },
          "sort": {
            "type": "string",
            "x-go-name": "Sort"
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Total"
          }
        }
      }
    },
    "APIDomainResp": {
      "description": "HTTP status code 200 for retrieving APIDomain",
      "schema": {
        "type": "object",
        "properties": {
          "created": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Created"
          },
          "domain": {
            "type": "string",
            "x-go-name": "Domain"
          },
          "id": {
            "type": "string",
            "x-go-name": "DomainID"
          },
          "status": {
            "type": "string",
            "x-go-name": "Status"
          }
        }
      }
    },
    "APIDomainsResp": {
      "description": "HTTP status code 200 for retrieving APIDomains",
      "schema": {
        "type": "object",
        "properties": {
          "collection": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/APIDomain"
            },
            "x-go-name": "APIDomains"
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit"
          },
          "offset": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Offset"
          },
          "query": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "x-go-name": "Search"
          },
          "sort": {
            "type": "string",
            "x-go-name": "Sort"
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Total"
          }
        }
      }
    },
    "APIEmailTemplateResp": {
      "description": "HTTP status code 200 for retrieving api role",
      "schema": {
        "$ref": "#/definitions/APIEmailTemplate"
      }
    },
    "APIEmailTemplateSetResp": {
      "description": "HTTP status code 200 for retrieving api role",
      "schema": {
        "$ref": "#/definitions/APIEmailTemplateSet"
      }
    },
    "APIEmailTemplateSetsResp": {
      "description": "HTTP status code 200 for retrieving api roles",
      "schema": {
        "$ref": "#/definitions/APIEmailTemplateSets"
      }
    },
    "APIEmailTemplatesResp": {
      "description": "HTTP status code 200 for retrieving api roles",
      "schema": {
        "$ref": "#/definitions/APIEmailTemplates"
      }
    },
    "APIEndpointCORSResp": {
      "description": "HTTP status code 200 for retrieving api endpoint cors response",
      "schema": {
        "type": "object",
        "properties": {
          "allow_all_domains": {
            "type": "boolean",
            "x-go-name": "AllowAllDomains"
          },
          "allow_cookies": {
            "type": "boolean",
            "x-go-name": "AllowCookies"
          },
          "allowed_headers": {
            "type": "string",
            "x-go-name": "AllowedHeaders"
          },
          "allowed_origins": {
            "type": "string",
            "x-go-name": "AllowedOrigins"
          },
          "api_definition_id": {
            "type": "string",
            "x-go-name": "APIDefinitionID"
          },
          "cors_subdomain_matching_allowed": {
            "type": "boolean",
            "x-go-name": "SubdomainMatchingAllowed"
          },
          "enable_cors": {
            "type": "boolean",
            "x-go-name": "EnableCORS"
          },
          "expose_headers": {
            "type": "string",
            "x-go-name": "ExposeHeaders"
          },
          "id": {
            "type": "string",
            "x-go-name": "ID"
          },
          "max_age": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "MaxAge"
          }
        }
      }
    },
    "APIEndpointCallTransformationResp": {
      "description": "HTTP status code 200 for retrieving api endpoint call transformation",
      "schema": {
        "type": "object",
        "properties": {
          "adapter": {
            "type": "string",
            "x-go-name": "Adapter"
          },
          "api_definition_id": {
            "type": "string",
            "x-go-name": "APIDefinitionID"
          },
          "id": {
            "type": "string",
            "x-go-name": "ID"
          },
          "perform_postprocess": {
            "type": "boolean",
            "x-go-name": "PerformPostprocess"
          },
          "perform_preprocess": {
            "type": "boolean",
            "x-go-name": "PerformPreprocess"
          },
          "postinputs": {
            "type": "string",
            "x-go-name": "Postinputs"
          },
          "preinputs": {
            "type": "string",
            "x-go-name": "Preinputs"
          }
        }
      }
    },
    "APIEndpointDetectionResp": {
      "description": "HTTP status code 200 for retrieving api end point detection",
      "schema": {
        "$ref": "#/definitions/APIEndpointDetection"
      }
    },
    "APIEndpointMoreResp": {
      "description": "HTTP status code 200 for retrieving api endpoints more",
      "schema": {
        "type": "object",
        "properties": {
          "allow_missing_mapi": {
            "type": "boolean",
            "x-go-name": "AllowMissingMAPI"
          },
          "api_definition_id": {
            "type": "string",
            "x-go-name": "APIDefinitionID"
          },
          "connection_timeout": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ConnectionTimeout"
          },
          "drop_mapi_from_call": {
            "type": "boolean",
            "x-go-name": "DropMAPIFromCall"
          },
          "enable_cookies": {
            "type": "boolean",
            "x-go-name": "EnableCookies"
          },
          "error_jsonp_callback": {
            "type": "string",
            "x-go-name": "ErrorJSONPCallback"
          },
          "error_jsonp_callback_default": {
            "type": "string",
            "x-go-name": "ErrorJSONPCallbackDefault"
          },
          "exclude_headers": {
            "type": "string",
            "x-go-name": "ExcludeHeaders"
          },
          "follow_redirects": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "FollowRedirects"
          },
          "gzip": {
            "type": "boolean",
            "x-go-name": "Gzip"
          },
          "gzip_backend_enabled": {
            "type": "boolean",
            "x-go-name": "GzipBackendEnabled"
          },
          "host_passthrough": {
            "type": "boolean",
            "x-go-name": "HostPassthrough"
          },
          "id": {
            "type": "string",
            "x-go-name": "ID"
          },
          "message_id_header_request": {
            "type": "boolean",
            "x-go-name": "MessageIDHeaderRequest"
          },
          "message_id_header_response": {
            "type": "boolean",
            "x-go-name": "MessageIDHeaderResponse"
          },
          "rate_limit_header": {
            "type": "boolean",
            "x-go-name": "RateLimitHeader"
          },
          "raw_host_header": {
            "type": "boolean",
            "x-go-name": "RawHostHeader"
          },
          "request_timeout": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "RequestTimeout"
          },
          "responder_header": {
            "type": "boolean",
            "x-go-name": "ResponderHeader"
          },
          "service_key_header": {
            "type": "boolean",
            "x-go-name": "ServiceKeyHeader"
          },
          "swap_credentials_mapi": {
            "type": "string",
            "x-go-name": "SwapCredentialsMAPI"
          },
          "swap_credentials_required": {
            "type": "boolean",
            "x-go-name": "SwapCredentialsRequired"
          },
          "swap_credentials_secret": {
            "type": "string",
            "x-go-name": "SwapCredentialsSecret"
          }
        }
      }
    },
    "APIEndpointPerformanceAccelerationResp": {
      "description": "HTTP status code 200 for retrieving APIEndpointPerformanceAcceleration",
      "schema": {
        "$ref": "#/definitions/APIEndpointPerformanceAcceleration"
      }
    },
    "APIEndpointScheduledMaintenanceEventResp": {
      "description": "HTTP status code 200 for retrieving APIEndpointScheduledMaintenanceEvent",
      "schema": {
        "type": "object",
        "properties": {
          "api_definition_id": {
            "type": "string",
            "x-go-name": "APIDefinitionID"
          },
          "api_endpoint_id": {
            "type": "string",
            "x-go-name": "APIEndpointID"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Created"
          },
          "end_time": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "EndTime"
          },
          "id": {
            "type": "string",
            "x-go-name": "ID"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "start_time": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "StartTime"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Updated"
          }
        }
      }
    },
    "APIEndpointSecurityResp": {
      "description": "HTTP status code 200 for retrieving api endpoint security",
      "schema": {
        "$ref": "#/definitions/APIEndpointSecurity"
      }
    },
    "APIErrorMessageResp": {
      "description": "HTTP status code 200 for retrieving APIErrorMessage",
      "schema": {
        "type": "object",
        "properties": {
          "api_definition_id": {
            "type": "string",
            "x-go-name": "APIDefinitionID"
          },
          "api_errorset_id": {
            "type": "string",
            "x-go-name": "APIErrorSetID"
          },
          "code": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Code"
          },
          "detail_header": {
            "type": "string",
            "x-go-name": "DetailHeader"
          },
          "id": {
            "type": "string",
            "x-go-name": "ID"
          },
          "response_body": {
            "type": "string",
            "x-go-name": "ResponseBody"
          },
          "status": {
            "type": "string",
            "x-go-name": "Status"
          }
        }
      }
    },
    "APIErrorMessagesResp": {
      "description": "HTTP status code 200 for retrieving APIErrorMessage",
      "schema": {
        "type": "object",
        "properties": {
          "collection": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/APIErrorMessage"
            },
            "x-go-name": "APIErrorMessages"
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit"
          },
          "offset": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Offset"
          },
          "query": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "x-go-name": "Search"
          },
          "sort": {
            "type": "string",
            "x-go-name": "Sort"
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Total"
          }
        }
      }
    },
    "APIErrorSetResp": {
      "description": "HTTP status code 200 for retrieving APIErrorSet",
      "schema": {
        "type": "object",
        "properties": {
          "api_definition_id": {
            "type": "string",
            "x-go-name": "APIDefinitionID"
          },
          "id": {
            "type": "string",
            "x-go-name": "ID"
          },
          "jsonp": {
            "type": "boolean",
            "x-go-name": "JSONp"
          },
          "jsonp_type": {
            "type": "string",
            "x-go-name": "JSONpType"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "type": {
            "type": "string",
            "x-go-name": "Type"
          }
        }
      }
    },
    "APIErrorSetsResp": {
      "description": "HTTP status code 200 for retrieving APIErrorSets",
      "schema": {
        "type": "object",
        "properties": {
          "collection": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/APIErrorSet"
            },
            "x-go-name": "APIErrorSets"
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit"
          },
          "offset": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Offset"
          },
          "query": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "x-go-name": "Search"
          },
          "sort": {
            "type": "string",
            "x-go-name": "Sort"
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Total"
          }
        }
      }
    },
    "APIHTTPSClientProfileResp": {
      "description": "HTTP status code 200 for retrieving APIHTTPSClientProfile",
      "schema": {
        "type": "object",
        "properties": {
          "created": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Created"
          },
          "description": {
            "type": "string",
            "x-go-name": "Description"
          },
          "id": {
            "type": "string",
            "x-go-name": "ID"
          },
          "identity_id": {
            "type": "string",
            "x-go-name": "IdentityID"
          },
          "identity_store_name": {
            "type": "string",
            "x-go-name": "IdentityStoreName"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "sni": {
            "type": "boolean",
            "x-go-name": "Sni"
          },
          "trust_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "HTTPSClientTrusts"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Updated"
          },
          "verify_hostname": {
            "type": "boolean",
            "x-go-name": "VerifyHostname"
          }
        }
      }
    },
    "APIHTTPSClientProfilesResp": {
      "description": "HTTP status code 200 for retrieving APIHTTPSClientProfiles",
      "schema": {
        "type": "object",
        "properties": {
          "collection": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/APIHTTPSClientProfile"
            },
            "x-go-name": "APIHTTPSClientProfiles"
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit"
          },
          "offset": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Offset"
          },
          "query": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "x-go-name": "Search"
          },
          "sort": {
            "type": "string",
            "x-go-name": "Sort"
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Total"
          }
        }
      }
    },
    "APIIdentitiesResp": {
      "description": "HTTP status code 200 for retrieving APIIdentities",
      "schema": {
        "type": "object",
        "properties": {
          "collection": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/APIIdentity"
            },
            "x-go-name": "APIIdentites"
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit"
          },
          "offset": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Offset"
          },
          "query": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "x-go-name": "Search"
          },
          "sort": {
            "type": "string",
            "x-go-name": "Sort"
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Total"
          }
        }
      }
    },
    "APIIdentityResp": {
      "description": "HTTP status code 200 for retrieving APIIdentity",
      "schema": {
        "type": "object",
        "properties": {
          "created": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Created"
          },
          "id": {
            "type": "string",
            "x-go-name": "ID"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Updated"
          }
        }
      }
    },
    "APIInteractiveDocResp": {
      "description": "HTTP status code 200 for retrieving APIInteractiveDoc",
      "schema": {
        "type": "object",
        "properties": {
          "api_definition_id": {
            "type": "string",
            "x-go-name": "APIDefinitionID"
          },
          "api_definition_name": {
            "type": "string",
            "x-go-name": "APIDefinitionName"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Created"
          },
          "default_api": {
            "type": "boolean",
            "x-go-name": "DefaultAPI"
          },
          "definition": {
            "type": "object",
            "additionalProperties": {},
            "x-go-name": "Definition"
          },
          "doc_type": {
            "type": "string",
            "x-go-name": "Doctype"
          },
          "editor_handle": {
            "type": "string",
            "x-go-name": "EditorHandle"
          },
          "id": {
            "type": "string",
            "x-go-name": "ID"
          },
          "schema_version": {
            "type": "string",
            "x-go-name": "SchemaVersion"
          },
          "title": {
            "type": "string",
            "x-go-name": "Title"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Updated"
          }
        }
      }
    },
    "APIInteractiveDocsResp": {
      "description": "HTTP status code 200 for retrieving APIInteractiveDocs",
      "schema": {
        "type": "object",
        "properties": {
          "collection": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/APIInteractiveDoc"
            },
            "x-go-name": "APIInteractiveDocs"
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit"
          },
          "offset": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Offset"
          },
          "query": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "x-go-name": "Search"
          },
          "sort": {
            "type": "string",
            "x-go-name": "Sort"
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Total"
          }
        }
      }
    },
    "APIMethodResp": {
      "description": "HTTP status code 200 for retrieving APIMethod",
      "schema": {
        "type": "object",
        "properties": {
          "api_definition_id": {
            "type": "string",
            "x-go-name": "APIDefinitionID"
          },
          "api_endpoint_id": {
            "type": "string",
            "x-go-name": "APIEndpointID"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Created"
          },
          "id": {
            "type": "string",
            "x-go-name": "ID"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "sample_json_response": {
            "type": "string",
            "x-go-name": "SampleJsonResponse"
          },
          "sample_xml_response": {
            "type": "string",
            "x-go-name": "SampleXmlResponse"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Updated"
          }
        }
      }
    },
    "APIMethodsResp": {
      "description": "HTTP status code 200 for retrieving APIMethods",
      "schema": {
        "type": "object",
        "properties": {
          "collection": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/APIMethod"
            },
            "x-go-name": "APIMethods"
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit"
          },
          "offset": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Offset"
          },
          "query": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "x-go-name": "Search"
          },
          "sort": {
            "type": "string",
            "x-go-name": "Sort"
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Total"
          }
        }
      }
    },
    "APIOrganizationResp": {
      "description": "HTTP status code 200 for retrieving APIOrganization",
      "schema": {
        "type": "object",
        "properties": {
          "children": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "SubOrganizations"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Created"
          },
          "description": {
            "type": "string",
            "x-go-name": "Description"
          },
          "id": {
            "type": "string",
            "x-go-name": "ID"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "parent_id": {
            "type": "string",
            "x-go-name": "Parent"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Updated"
          }
        }
      }
    },
    "APIOrganizationStatsResp": {
      "description": "HTTP status code 200 for retrieving APIOrganizationStats",
      "schema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "x-go-name": "ID"
          },
          "stats": {
            "x-go-name": "Stats"
          }
        }
      }
    },
    "APIOrganizationsResp": {
      "description": "HTTP status code 200 for retrieving APIOrganizations",
      "schema": {
        "type": "object",
        "properties": {
          "collection": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/APIOrganization"
            },
            "x-go-name": "APIOrganizations"
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit"
          },
          "offset": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Offset"
          },
          "query": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "x-go-name": "Search"
          },
          "sort": {
            "type": "string",
            "x-go-name": "Sort"
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Total"
          }
        }
      }
    },
    "APIPackageKeyResp": {
      "description": "HTTP status code 200 for retrieving APIPackageKey",
      "schema": {
        "type": "object",
        "properties": {
          "apikey": {
            "type": "string",
            "x-go-name": "Apikey"
          },
          "app_id": {
            "type": "string",
            "x-go-name": "AppID"
          },
          "app_name": {
            "type": "string",
            "x-go-name": "AppName"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Created"
          },
          "customAPIKey": {
            "type": "boolean",
            "x-go-name": "CustomAPIKey"
          },
          "eav": {
            "type": "string",
            "x-go-name": "Eav"
          },
          "id": {
            "type": "string",
            "x-go-name": "ID"
          },
          "member_id": {
            "type": "string",
            "x-go-name": "MemberID"
          },
          "member_username": {
            "type": "string",
            "x-go-name": "MemberUsername"
          },
          "package_id": {
            "type": "string",
            "x-go-name": "PackageID"
          },
          "package_name": {
            "type": "string",
            "x-go-name": "PackageName"
          },
          "plan_id": {
            "type": "string",
            "x-go-name": "PlanID"
          },
          "plan_name": {
            "type": "string",
            "x-go-name": "PlanName"
          },
          "plan_rate_limit_quota": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PlanQuota"
          },
          "plan_rate_limit_quota_period": {
            "type": "string",
            "x-go-name": "PlanQuotaPeriod"
          },
          "plan_rate_limit_throttle": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PlanThrottle"
          },
          "qps_limit_ceiling": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "QPSLimitCeiling"
          },
          "qps_limit_exempt": {
            "type": "boolean",
            "x-go-name": "QPSLimitExempt"
          },
          "qps_limit_type": {
            "type": "string",
            "x-go-name": "QPSLimitType"
          },
          "rate_limit_ceiling": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "RateLimitCeiling"
          },
          "rate_limit_exempt": {
            "type": "boolean",
            "x-go-name": "RateLimitExempt"
          },
          "rate_limit_type": {
            "type": "string",
            "x-go-name": "RateLimitType"
          },
          "secret": {
            "type": "string",
            "x-go-name": "Secret"
          },
          "status": {
            "type": "string",
            "x-go-name": "Status"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Updated"
          }
        }
      }
    },
    "APIPackageKeysResp": {
      "description": "HTTP status code 200 for retrieving APIPackageKeys",
      "schema": {
        "type": "object",
        "properties": {
          "collection": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/APIPackageKey"
            },
            "x-go-name": "APIPackageKeys"
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit"
          },
          "offset": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Offset"
          },
          "query": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "x-go-name": "Search"
          },
          "sort": {
            "type": "string",
            "x-go-name": "Sort"
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Total"
          }
        }
      }
    },
    "APIPackageResp": {
      "description": "HTTP status code 200 for retrieving APIPackage",
      "schema": {
        "type": "object",
        "properties": {
          "created": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Created"
          },
          "description": {
            "type": "string",
            "x-go-name": "Description"
          },
          "generate_shared_secret": {
            "type": "boolean",
            "x-go-name": "GenerateSharedSecret"
          },
          "id": {
            "type": "string",
            "x-go-name": "ID"
          },
          "key_length": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "KeyLength"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "org_id": {
            "type": "string",
            "x-go-name": "OrganizationID"
          },
          "org_name": {
            "type": "string",
            "x-go-name": "OrganizationName"
          },
          "shared_secret_length": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "SharedSecretLength"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Updated"
          },
          "uuid": {
            "type": "string",
            "x-go-name": "UUID"
          }
        }
      }
    },
    "APIPackagesResp": {
      "description": "HTTP status code 200 for retrieving APIPackages",
      "schema": {
        "type": "object",
        "properties": {
          "collection": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/APIPackage"
            },
            "x-go-name": "APIPackages"
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit"
          },
          "offset": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Offset"
          },
          "query": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "x-go-name": "Search"
          },
          "sort": {
            "type": "string",
            "x-go-name": "Sort"
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Total"
          }
        }
      }
    },
    "APIPlanDefinitionResp": {
      "description": "HTTP status code 200 for retrieving APIPlanDefinitions",
      "schema": {
        "type": "object",
        "properties": {
          "api_definition_id": {
            "type": "string",
            "x-go-name": "APIDefinitionID"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Created"
          },
          "id": {
            "type": "string",
            "x-go-name": "ID"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "package_id": {
            "type": "string",
            "x-go-name": "PackageID"
          },
          "plan_id": {
            "type": "string",
            "x-go-name": "PlanID"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Updated"
          }
        }
      }
    },
    "APIPlanDefinitionsResp": {
      "description": "HTTP status code 200 for retrieving APIPlanDefinitions",
      "schema": {
        "type": "object",
        "properties": {
          "collection": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/APIPlanDefinition"
            },
            "x-go-name": "APIPlanDefinitions"
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit"
          },
          "offset": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Offset"
          },
          "query": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "x-go-name": "Search"
          },
          "sort": {
            "type": "string",
            "x-go-name": "Sort"
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Total"
          }
        }
      }
    },
    "APIPlanEmailTemplateResp": {
      "description": "HTTP status code 200 for retrieving api role",
      "schema": {
        "$ref": "#/definitions/APIPlanEmailTemplate"
      }
    },
    "APIPlanEmailTemplateSetResp": {
      "description": "HTTP status code 200 for retrieving api role",
      "schema": {
        "$ref": "#/definitions/APIPlanEmailTemplateSet"
      }
    },
    "APIPlanEmailTemplatesResp": {
      "description": "HTTP status code 200 for retrieving api roles",
      "schema": {
        "$ref": "#/definitions/APIPlanEmailTemplates"
      }
    },
    "APIPlanEmailTemplatesSetResp": {
      "description": "HTTP status code 200 for retrieving api roles",
      "schema": {
        "$ref": "#/definitions/APIPlanEmailTemplatesSet"
      }
    },
    "APIPlanEndpointResp": {
      "description": "HTTP status code 200 for retrieving APIPlanEndpoint",
      "schema": {
        "type": "object",
        "properties": {
          "allow_undefined_methods": {
            "type": "boolean",
            "x-go-name": "AllowUndefinedMethods"
          },
          "api_definition_endpoint_id": {
            "type": "string",
            "x-go-name": "APIEndpointID"
          },
          "api_definition_id": {
            "type": "string",
            "x-go-name": "APIDefinitionID"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Created"
          },
          "id": {
            "type": "string",
            "x-go-name": "ID"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "package_id": {
            "type": "string",
            "x-go-name": "PackageID"
          },
          "plan_id": {
            "type": "string",
            "x-go-name": "PlanID"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Updated"
          }
        }
      }
    },
    "APIPlanEndpointsResp": {
      "description": "HTTP status code 200 for retrieving APIPlanEndpoints",
      "schema": {
        "type": "object",
        "properties": {
          "collection": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/APIPlanEndpoint"
            },
            "x-go-name": "APIPlanEndpoints"
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit"
          },
          "offset": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Offset"
          },
          "query": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "x-go-name": "Search"
          },
          "sort": {
            "type": "string",
            "x-go-name": "Sort"
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Total"
          }
        }
      }
    },
    "APIPlanMethodResp": {
      "description": "HTTP status code 200 for retrieving APIPlanMethod",
      "schema": {
        "type": "object",
        "properties": {
          "api_definition_endpoint_id": {
            "type": "string",
            "x-go-name": "APIEndpointID"
          },
          "api_definition_id": {
            "type": "string",
            "x-go-name": "APIDefinitionID"
          },
          "api_definition_method_id": {
            "type": "string",
            "x-go-name": "APIMethodID"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Created"
          },
          "id": {
            "type": "string",
            "x-go-name": "ID"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "package_id": {
            "type": "string",
            "x-go-name": "PackageID"
          },
          "plan_id": {
            "type": "string",
            "x-go-name": "PlanID"
          },
          "qps_limit_ceiling": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "QPSLimitCeiling"
          },
          "qps_limit_exempt": {
            "type": "boolean",
            "x-go-name": "QPSLimitExempt"
          },
          "rate_limit_ceiling": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "RateLimitCeiling"
          },
          "rate_limit_exempt": {
            "type": "boolean",
            "x-go-name": "RateLimitExempt"
          },
          "rate_limit_period": {
            "type": "string",
            "x-go-name": "RateLimitPeriod"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Updated"
          }
        }
      }
    },
    "APIPlanMethodsResp": {
      "description": "HTTP status code 200 for retrieving APIPlanMethods",
      "schema": {
        "type": "object",
        "properties": {
          "collection": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/APIPlanMethod"
            },
            "x-go-name": "APIPlanMethods"
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit"
          },
          "offset": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Offset"
          },
          "query": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "x-go-name": "Search"
          },
          "sort": {
            "type": "string",
            "x-go-name": "Sort"
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Total"
          }
        }
      }
    },
    "APIPlanRateLimitResp": {
      "description": "HTTP status code 200 for retrieving APIPla rate limit",
      "schema": {
        "type": "object",
        "properties": {
          "allow_package_key_quota_override": {
            "type": "boolean",
            "x-go-name": "AllowPackageKeyQuotaOverride"
          },
          "allow_package_key_throttle_override": {
            "type": "boolean",
            "x-go-name": "AllowPackageKeyThrottleOverride"
          },
          "id": {
            "type": "string",
            "x-go-name": "ID"
          },
          "package_id": {
            "type": "string",
            "x-go-name": "PackageID"
          },
          "quota": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Quota"
          },
          "quota_period": {
            "type": "string",
            "x-go-name": "QuotaPeriod"
          },
          "throttle": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Throttle"
          }
        }
      }
    },
    "APIPlanResp": {
      "description": "HTTP status code 200 for retrieving APIPlan",
      "schema": {
        "type": "object",
        "properties": {
          "admin_key_provisioning": {
            "type": "boolean",
            "x-go-name": "AdminKeyProvisioning"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Created"
          },
          "description": {
            "type": "string",
            "x-go-name": "Description"
          },
          "email_template_set_id": {
            "type": "string",
            "x-go-name": "EmailTemplateSetId"
          },
          "id": {
            "type": "string",
            "x-go-name": "ID"
          },
          "maximum_keys_allowed": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "MaximumKeysAllowed"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "number_of_keys_before_review": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "NumberOfKeysBeforeReview"
          },
          "package_id": {
            "type": "string",
            "x-go-name": "PackageID"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Roles"
          },
          "self_service_key_provisioning": {
            "type": "boolean",
            "x-go-name": "SelfServiceKeyProvisioning"
          },
          "status": {
            "type": "string",
            "x-go-name": "Status"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Updated"
          }
        }
      }
    },
    "APIPlansResp": {
      "description": "HTTP status code 200 for retrieving APIPlans",
      "schema": {
        "type": "object",
        "properties": {
          "collection": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/APIPlan"
            },
            "x-go-name": "APIPlans"
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit"
          },
          "offset": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Offset"
          },
          "query": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "x-go-name": "Search"
          },
          "sort": {
            "type": "string",
            "x-go-name": "Sort"
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Total"
          }
        }
      }
    },
    "APIResponseFilterResp": {
      "description": "HTTP status code 200 for retrieving APIResponseFilter",
      "schema": {
        "type": "object",
        "properties": {
          "api_definition_id": {
            "type": "string",
            "x-go-name": "APIDefinitionID"
          },
          "api_endpoint_id": {
            "type": "string",
            "x-go-name": "APIEndpointID"
          },
          "api_method_id": {
            "type": "string",
            "x-go-name": "APIMethodID"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Created"
          },
          "id": {
            "type": "string",
            "x-go-name": "ID"
          },
          "json_filter_fields": {
            "type": "string",
            "x-go-name": "JSONFilterFields"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "notes": {
            "type": "string",
            "x-go-name": "Notes"
          },
          "sample_json_response": {
            "type": "string",
            "x-go-name": "SampleJsonResponse"
          },
          "sample_xml_response": {
            "type": "string",
            "x-go-name": "SampleXmlResponse"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Updated"
          },
          "xml_filter_fields": {
            "type": "string",
            "x-go-name": "XMLFilterFields"
          }
        }
      }
    },
    "APIResponseFiltersResp": {
      "description": "HTTP status code 200 for retrieving APIResponseFilters",
      "schema": {
        "type": "object",
        "properties": {
          "collection": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/APIResponseFilter"
            },
            "x-go-name": "APIResponseFilters"
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit"
          },
          "offset": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Offset"
          },
          "query": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "x-go-name": "Search"
          },
          "sort": {
            "type": "string",
            "x-go-name": "Sort"
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Total"
          }
        }
      }
    },
    "APIRoleResp": {
      "description": "HTTP status code 200 for retrieving api role",
      "schema": {
        "$ref": "#/definitions/APIRole"
      }
    },
    "APIRolesResp": {
      "description": "HTTP status code 200 for retrieving api roles",
      "schema": {
        "$ref": "#/definitions/APIRoles"
      }
    },
    "APIScheduledMaintenanceEventEndpointResp": {
      "description": "HTTP status code 200 for retrieving APIScheduledMaintenanceEventEndpoint",
      "schema": {
        "type": "object",
        "properties": {
          "api_definition_endpoint_id": {
            "type": "string",
            "x-go-name": "APIEndpointID"
          },
          "api_definition_id": {
            "type": "string",
            "x-go-name": "APIDefinitionID"
          },
          "api_schedule_maintenance_id": {
            "type": "string",
            "x-go-name": "APIScheduledMaintenanceEventID"
          },
          "api_schedule_maintenance_name": {
            "type": "string",
            "x-go-name": "APIScheduledMaintenanceEventName"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Created"
          },
          "id": {
            "type": "string",
            "x-go-name": "ID"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Updated"
          }
        }
      }
    },
    "APIScheduledMaintenanceEventEndpointsResp": {
      "description": "HTTP status code 200 for retrieving APIScheduledMaintenanceEventEndpoints",
      "schema": {
        "type": "object",
        "properties": {
          "collection": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/APIScheduledMaintenanceEventEndpoint"
            },
            "x-go-name": "APIScheduledMaintenanceEventEndpoints"
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit"
          },
          "offset": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Offset"
          },
          "query": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "x-go-name": "Search"
          },
          "sort": {
            "type": "string",
            "x-go-name": "Sort"
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Total"
          }
        }
      }
    },
    "APIScheduledMaintenanceEventResp": {
      "description": "HTTP status code 200 for retrieving APIScheduledMaintenanceEvent",
      "schema": {
        "type": "object",
        "properties": {
          "created": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Created"
          },
          "end_time": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "EndTime"
          },
          "endpoints": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/APIScheduledMaintenanceEventEndpoint"
            },
            "x-go-name": "Endpoints"
          },
          "id": {
            "type": "string",
            "x-go-name": "ID"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "start_time": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "StartTime"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Updated"
          }
        }
      }
    },
    "APIScheduledMaintenanceEventsResp": {
      "description": "HTTP status code 200 for retrieving APIScheduledMaintenanceEvents",
      "schema": {
        "type": "object",
        "properties": {
          "collection": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/APIScheduledMaintenanceEvent"
            },
            "x-go-name": "APIScheduledMaintenanceEvents"
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit"
          },
          "offset": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Offset"
          },
          "query": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "x-go-name": "Search"
          },
          "sort": {
            "type": "string",
            "x-go-name": "Sort"
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Total"
          }
        }
      }
    },
    "AppResp": {
      "description": "HTTP status code 200 for retrieving App",
      "schema": {
        "type": "object",
        "properties": {
          "created": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Created"
          },
          "description": {
            "type": "string",
            "x-go-name": "Description"
          },
          "eav": {
            "type": "string",
            "x-go-name": "Eav"
          },
          "id": {
            "type": "string",
            "x-go-name": "ID"
          },
          "member_id": {
            "type": "string",
            "x-go-name": "MemberID"
          },
          "member_username": {
            "type": "string",
            "x-go-name": "MemberUsername"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "oauth_redirect_uri": {
            "type": "string",
            "x-go-name": "OAuthRedirectURI"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Updated"
          }
        }
      }
    },
    "AppsResp": {
      "description": "HTTP status code 200 for retrieving Apps",
      "schema": {
        "type": "object",
        "properties": {
          "collection": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/App"
            },
            "x-go-name": "Apps"
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit"
          },
          "offset": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Offset"
          },
          "query": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "x-go-name": "Search"
          },
          "sort": {
            "type": "string",
            "x-go-name": "Sort"
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Total"
          }
        }
      }
    },
    "AreaResp": {
      "description": "HTTP status code 200 for retrieving Area",
      "schema": {
        "type": "object",
        "properties": {
          "created": {
            "type": "string",
            "x-go-name": "Created"
          },
          "defaultLocale": {
            "type": "string",
            "x-go-name": "DefaultLocale"
          },
          "email_templates": {
            "$ref": "#/definitions/EmailTemplate"
          },
          "footer": {
            "type": "string",
            "x-go-name": "Footer"
          },
          "id": {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "IDForSerialization"
          },
          "isMultiLocale": {
            "type": "boolean",
            "x-go-name": "IsMultiLocale"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "owner_handle": {
            "type": "string",
            "x-go-name": "OwnerHandle"
          },
          "status": {
            "type": "string",
            "x-go-name": "Status"
          },
          "subj": {
            "type": "string",
            "x-go-name": "Subj"
          },
          "summary": {
            "type": "string",
            "x-go-name": "Summary"
          },
          "updated": {
            "type": "string",
            "x-go-name": "Updated"
          },
          "uuid": {
            "type": "string",
            "format": "uuid",
            "x-go-name": "UUID"
          }
        }
      }
    },
    "AreasResp": {
      "description": "HTTP status code 200 for retrieving Areas",
      "schema": {
        "type": "object",
        "properties": {
          "collection": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Area"
            },
            "x-go-name": "Areas"
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit"
          },
          "offset": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Offset"
          },
          "sort": {
            "type": "string",
            "x-go-name": "Sort"
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Total"
          }
        }
      }
    },
    "DomainNameResp": {
      "description": "HTTP status code 200 for retrieving DomainName",
      "schema": {
        "type": "object",
        "properties": {
          "areaId": {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "AreaID"
          },
          "captchaKey": {
            "type": "string",
            "x-go-name": "CaptchaKey"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "CreatedAt"
          },
          "dispatch": {
            "type": "string",
            "x-go-name": "Dispatch"
          },
          "enableCaptcha": {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "EnableCaptcha"
          },
          "enableGhostToOriginCacheLockdown": {
            "type": "boolean",
            "x-go-name": "EnableGhostToOriginCacheLockdown"
          },
          "enableHttpAuth": {
            "type": "boolean",
            "x-go-name": "EnableHTTPAuth"
          },
          "enableRemoteIPRestriction": {
            "type": "boolean",
            "x-go-name": "EnableRemoteIPRestriction"
          },
          "environment": {
            "type": "string",
            "x-go-name": "Environment"
          },
          "httpAuthAccessDenied": {
            "type": "string",
            "x-go-name": "HTTPAuthAccessDenied"
          },
          "httpAuthRealm": {
            "type": "string",
            "x-go-name": "HTTPAuthRealm"
          },
          "httpAuthUsers": {
            "type": "string",
            "x-go-name": "HTTPAuthUsers"
          },
          "isMasheryOnly": {
            "type": "boolean",
            "x-go-name": "IsMasheryOnly"
          },
          "isPrimary": {
            "type": "boolean",
            "x-go-name": "IsPrimary"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "redirectType": {
            "type": "integer",
            "format": "uint8",
            "x-go-name": "RedirectType"
          },
          "redirectUri": {
            "type": "string",
            "x-go-name": "RedirectURI"
          },
          "remoteIPAccessDenied": {
            "type": "string",
            "x-go-name": "RemoteIPAccessDenied"
          },
          "remoteIPBlacklist": {
            "type": "string",
            "x-go-name": "RemoteIPBlacklist"
          },
          "remoteIPWhitelist": {
            "type": "string",
            "x-go-name": "RemoteIPWhitelist"
          },
          "thirdPartyCachingKey": {
            "type": "string",
            "x-go-name": "ThirdPartyCachingKey"
          },
          "thirdPartyCachingSecret": {
            "type": "string",
            "x-go-name": "ThirdPartyCachingSecret"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "UpdatedAt"
          }
        }
      }
    },
    "FolderResp": {
      "description": "HTTP status code 200 for retrieving Folder",
      "schema": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "x-go-name": "Content"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "CreatedAt"
          },
          "created_by": {
            "type": "string",
            "x-go-name": "CreatedBy"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "x-go-name": "UUID"
          },
          "is_online": {
            "type": "boolean",
            "x-go-name": "IsOnline"
          },
          "org_id": {
            "type": "string",
            "format": "uuid",
            "x-go-name": "OrgUUID"
          },
          "pages": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Page"
            },
            "x-go-name": "Pages"
          },
          "parent_id": {
            "type": "string",
            "format": "uuid",
            "x-go-name": "ParentID"
          },
          "path": {
            "type": "string",
            "x-go-name": "Path"
          },
          "position": {
            "$ref": "#/definitions/Position"
          },
          "published": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "PublishedAt"
          },
          "published_by": {
            "type": "string",
            "x-go-name": "PublishedBy"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "x-go-name": "Roles"
          },
          "state": {
            "type": "string",
            "x-go-name": "State"
          },
          "sub_folders": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Folder"
            },
            "x-go-name": "SubFolders"
          },
          "title": {
            "type": "string",
            "x-go-name": "Title"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "UpdatedAt"
          },
          "updated_by": {
            "type": "string",
            "x-go-name": "EditedBy"
          },
          "version": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Version"
          }
        }
      }
    },
    "InteractiveDocumentResp": {
      "description": "HTTP status code 200 for retrieving InteractiveDocument",
      "schema": {
        "type": "object",
        "properties": {
          "Editor": {
            "type": "string",
            "x-go-name": "EditorHandle"
          },
          "OrgID": {
            "type": "integer",
            "format": "uint64"
          },
          "SchemaVersion": {
            "type": "string"
          },
          "URL": {
            "type": "string"
          },
          "areaId": {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "AreaID"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "CreatedAt"
          },
          "documentType": {
            "type": "string",
            "x-go-name": "DocumentType"
          },
          "id": {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "ID"
          },
          "isDefault": {
            "type": "integer",
            "format": "uint8",
            "x-go-name": "IsDefault"
          },
          "spec": {
            "type": "object",
            "x-go-name": "Definition"
          },
          "spkey": {
            "type": "string",
            "x-go-name": "Spkey"
          },
          "title": {
            "type": "string",
            "x-go-name": "Title"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "UpdatedAt"
          }
        }
      }
    },
    "MemberAppResp": {
      "description": "HTTP status code 200 for retrieving MemberApp",
      "schema": {
        "type": "object",
        "properties": {
          "ads": {
            "type": "string",
            "x-go-name": "Ads"
          },
          "adsSystem": {
            "type": "string",
            "x-go-name": "AdsSystem"
          },
          "applicationName": {
            "type": "string",
            "x-go-name": "Name"
          },
          "areaID": {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "AreaID"
          },
          "commercial": {
            "type": "string",
            "x-go-name": "Commercial"
          },
          "created": {
            "type": "string",
            "x-go-name": "Created"
          },
          "eav": {
            "type": "string",
            "x-go-name": "Eav"
          },
          "externalID": {
            "type": "string",
            "x-go-name": "ExternalID"
          },
          "howDidYouHear": {
            "type": "string",
            "x-go-name": "HowDidYouHear"
          },
          "isPackaged": {
            "type": "string",
            "x-go-name": "IsPackaged"
          },
          "notes": {
            "type": "string",
            "x-go-name": "Notes"
          },
          "oauthRedirectUri": {
            "type": "string",
            "x-go-name": "OauthRedirectURI"
          },
          "packageKeys": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/PackageKey"
            },
            "x-go-name": "PackageKeys"
          },
          "preferredOutput": {
            "type": "string",
            "x-go-name": "PreferredOutput"
          },
          "preferredProtocol": {
            "type": "string",
            "x-go-name": "PreferredProtocol"
          },
          "prefs": {
            "type": "string",
            "x-go-name": "Prefs"
          },
          "status": {
            "type": "string",
            "x-go-name": "Status"
          },
          "summary": {
            "type": "string",
            "x-go-name": "Summ"
          },
          "tags": {
            "type": "string",
            "x-go-name": "Tags"
          },
          "type": {
            "type": "string",
            "x-go-name": "Type"
          },
          "updated": {
            "type": "string",
            "x-go-name": "Updated"
          },
          "uri": {
            "type": "string",
            "x-go-name": "URI"
          },
          "usageModel": {
            "type": "string",
            "x-go-name": "UsageModel"
          },
          "username": {
            "type": "string",
            "x-go-name": "Handle"
          },
          "uuid": {
            "type": "string",
            "format": "uuid",
            "x-go-name": "UUID"
          }
        }
      }
    },
    "MemberAppsResp": {
      "description": "HTTP status code 200 for retrieving MemberApps",
      "schema": {
        "$ref": "#/definitions/MemberApps"
      }
    },
    "PackageKeyResp": {
      "description": "HTTP status code 200 for retrieving PackageKey",
      "schema": {
        "type": "object",
        "properties": {
          "apikey": {
            "type": "string",
            "x-go-name": "APIKey"
          },
          "app_id": {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "AppID"
          },
          "application": {
            "$ref": "#/definitions/MemberApp"
          },
          "area_id": {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "AreaID"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "CreatedAt"
          },
          "eav": {
            "type": "string",
            "x-go-name": "Eav"
          },
          "package": {
            "$ref": "#/definitions/Package"
          },
          "package_id": {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "PackageID"
          },
          "plan": {
            "$ref": "#/definitions/Plan"
          },
          "plan_id": {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "PlanID"
          },
          "qps_limit_ceiling": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "QPSLimitCeiling"
          },
          "qps_limit_exempt": {
            "type": "boolean",
            "x-go-name": "QPSLimitExempt"
          },
          "rate_limit_ceiling": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "RateLimitCeiling"
          },
          "rate_limit_exempt": {
            "type": "boolean",
            "x-go-name": "RateLimitExempt"
          },
          "secret": {
            "type": "string",
            "x-go-name": "Secret"
          },
          "status": {
            "type": "string",
            "x-go-name": "Status"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "UpdatedAt"
          },
          "username": {
            "type": "string",
            "x-go-name": "Handle"
          },
          "uuid": {
            "type": "string",
            "format": "uuid",
            "x-go-name": "UUID"
          }
        }
      }
    },
    "PackageKeysResp": {
      "description": "HTTP status code 200 for retrieving PackageKeys",
      "schema": {
        "$ref": "#/definitions/PackageKeys"
      }
    },
    "PageDataResp": {
      "description": "HTTP status code 200 for retrieving Page",
      "schema": {
        "type": "object",
        "properties": {
          "perspectives": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Perspective"
              }
            },
            "x-go-name": "Perspective"
          }
        }
      }
    },
    "PageDataResponse": {
      "description": "HTTP status code 200 for retrieving PageDataResponse",
      "schema": {
        "type": "object",
        "properties": {
          "footer": {
            "type": "string",
            "x-go-name": "Footer"
          },
          "footer_nav": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/PortalNavList"
            },
            "x-go-name": "FooterNav"
          },
          "primary_nav": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/PortalNavList"
            },
            "x-go-name": "PrimaryNav"
          }
        }
      }
    },
    "PageResp": {
      "description": "HTTP status code 200 for retrieving Page",
      "schema": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "x-go-name": "Content"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "CreatedAt"
          },
          "created_by": {
            "type": "string",
            "x-go-name": "CreatedBy"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "x-go-name": "UUID"
          },
          "is_online": {
            "type": "boolean",
            "x-go-name": "IsOnline"
          },
          "org_id": {
            "type": "string",
            "format": "uuid",
            "x-go-name": "OrgUUID"
          },
          "parent_id": {
            "type": "string",
            "format": "uuid",
            "x-go-name": "ParentID"
          },
          "path": {
            "type": "string",
            "x-go-name": "Path"
          },
          "position": {
            "$ref": "#/definitions/Position"
          },
          "published": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "PublishedAt"
          },
          "published_by": {
            "type": "string",
            "x-go-name": "PublishedBy"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "x-go-name": "Roles"
          },
          "state": {
            "type": "string",
            "x-go-name": "State"
          },
          "title": {
            "type": "string",
            "x-go-name": "Title"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "UpdatedAt"
          },
          "updated_by": {
            "type": "string",
            "x-go-name": "EditedBy"
          },
          "version": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Version"
          }
        }
      }
    },
    "PortalDomainResp": {
      "description": "HTTP status code 200 for retrieving PortalDomain",
      "schema": {
        "type": "object",
        "properties": {
          "captcha_key": {
            "type": "string",
            "x-go-name": "CaptchaKey"
          },
          "captcha_secret": {
            "type": "string",
            "x-go-name": "CaptchaSecret"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "CreatedAt"
          },
          "enable_captcha": {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "EnableCaptcha"
          },
          "id": {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "ID"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "primary": {
            "type": "boolean",
            "x-go-name": "Primary"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "UpdatedAt"
          }
        }
      }
    },
    "PortalDomainsResp": {
      "description": "HTTP status code 200 for retrieving PortalDomains",
      "schema": {
        "type": "object",
        "properties": {
          "collection": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/PortalDomain"
            },
            "x-go-name": "PortalDomains"
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit"
          },
          "offset": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Offset"
          },
          "query": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "x-go-name": "Search"
          },
          "sort": {
            "type": "string",
            "x-go-name": "Sort"
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Total"
          }
        }
      }
    },
    "PortalNavListResp": {
      "description": "HTTP status code 200 for retrieving Nav",
      "schema": {
        "type": "object",
        "properties": {
          "collection": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/PortalNav"
            },
            "x-go-name": "SiteMap"
          },
          "offset": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Offset"
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Total"
          }
        }
      }
    },
    "PortalNavResp": {
      "description": "HTTP status code 200 for retrieving Nav",
      "schema": {
        "type": "object",
        "properties": {
          "area_id": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "AreaID"
          },
          "content_id": {
            "type": "string",
            "format": "uuid",
            "x-go-name": "ContentID"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "CreatedAt"
          },
          "created_by": {
            "type": "string",
            "x-go-name": "CreatedBy"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "x-go-name": "UUID"
          },
          "is_online": {
            "type": "boolean",
            "x-go-name": "IsOnline"
          },
          "open_new_tab": {
            "type": "boolean",
            "x-go-name": "OpenInNewTab"
          },
          "parent_id": {
            "type": "string",
            "format": "uuid",
            "x-go-name": "ParentID"
          },
          "path": {
            "type": "string",
            "x-go-name": "Path"
          },
          "position": {
            "$ref": "#/definitions/Position"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "x-go-name": "Roles"
          },
          "sequence_num": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "SequenceNum"
          },
          "title": {
            "type": "string",
            "x-go-name": "Title"
          },
          "type": {
            "type": "string",
            "x-go-name": "Type"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "UpdatedAt"
          },
          "updated_by": {
            "type": "string",
            "x-go-name": "EditedBy"
          }
        }
      }
    },
    "SiteMapResp": {
      "description": "HTTP status code 200 for retrieving SiteMap",
      "schema": {
        "type": "object",
        "properties": {
          "collection": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SiteMapResponse"
            },
            "x-go-name": "SiteMap"
          },
          "offset": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Offset"
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Total"
          }
        }
      }
    },
    "SwaggerResp": {
      "description": "HTTP status code 200 for retrieving Swagger",
      "schema": {
        "type": "object",
        "properties": {
          "definition": {
            "type": "object",
            "additionalProperties": {},
            "x-go-name": "Definition"
          },
          "id": {
            "type": "string",
            "x-go-name": "ID"
          },
          "title": {
            "type": "string",
            "x-go-name": "Title"
          },
          "url": {
            "type": "string",
            "x-go-name": "URL"
          }
        }
      }
    },
    "SwaggersResp": {
      "description": "HTTP status code 200 for retrieving Swaggers",
      "schema": {
        "type": "object",
        "properties": {
          "collection": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Swagger"
            },
            "x-go-name": "Swaggers"
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit"
          },
          "offset": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Offset"
          },
          "query": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "x-go-name": "Search"
          },
          "sort": {
            "type": "string",
            "x-go-name": "Sort"
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Total"
          }
        }
      }
    },
    "UserResp": {
      "description": "HTTP status code 200 for retrieving User",
      "schema": {
        "$ref": "#/definitions/User"
      }
    },
    "apiEndpointResp": {
      "description": "HTTP status code 200 for retrieving api endpoint",
      "schema": {
        "type": "object",
        "properties": {
          "api_definition_id": {
            "type": "string",
            "x-go-name": "APIDefinitionID"
          },
          "api_https_client_profile_id": {
            "type": "string",
            "x-go-name": "HTTPSClientProfileID"
          },
          "error_set_id": {
            "type": "string",
            "x-go-name": "ErrorSetID"
          },
          "error_set_name": {
            "type": "string",
            "x-go-name": "ErrorSetName"
          },
          "id": {
            "type": "string",
            "x-go-name": "ID"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "public_endpoint_address_path": {
            "type": "string",
            "x-go-name": "PublicEndpointAddressPath"
          },
          "public_endpoint_address_protocol": {
            "type": "boolean",
            "x-go-name": "PublicEndpointAddressProtocol"
          },
          "public_traffic_manager_domain": {
            "type": "string",
            "x-go-name": "PublicTrafficManagerDomain"
          },
          "require_mtls": {
            "type": "boolean",
            "x-go-name": "MutualPublicEndpointAddressProtocol"
          },
          "tm_endpoint_address_domain": {
            "type": "string",
            "x-go-name": "TMEndpointAddressDomain"
          },
          "tm_endpoint_address_params": {
            "type": "string",
            "x-go-name": "TMEndpointAddressParams"
          },
          "tm_endpoint_address_path": {
            "type": "string",
            "x-go-name": "TMEndpointAddressPath"
          },
          "tm_endpoint_address_protocol": {
            "type": "string",
            "x-go-name": "TMEndpointAddressProtocol"
          },
          "type": {
            "type": "string",
            "x-go-name": "Type"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Updated"
          },
          "user_controlled_error_location": {
            "type": "string",
            "x-go-name": "UserControlledErrorLocation"
          },
          "user_controlled_error_location_key": {
            "type": "string",
            "x-go-name": "UserControlledErrorLocationKey"
          }
        }
      }
    },
    "apiEndpointsResp": {
      "description": "HTTP status code 200 for retrieving api endpoints",
      "schema": {
        "type": "object",
        "properties": {
          "collection": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/APIEndpoint"
            },
            "x-go-name": "APIEndpoints"
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit"
          },
          "offset": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Offset"
          },
          "query": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "x-go-name": "Search"
          },
          "sort": {
            "type": "string",
            "x-go-name": "Sort"
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Total"
          }
        }
      }
    },
    "areaConfigResp": {
      "description": "HTTP status code 200 for retrieving area config list",
      "schema": {
        "type": "object",
        "properties": {
          "area_id": {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "AreaID"
          },
          "area_uuid": {
            "type": "string",
            "format": "uuid",
            "x-go-name": "AreaUUID"
          },
          "area_wide_qps_limit": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "AreaWideQPSLimit"
          },
          "body_file_css": {
            "type": "string",
            "x-go-name": "BodyFileCSS"
          },
          "body_file_js": {
            "type": "string",
            "x-go-name": "BodyFileJS"
          },
          "body_inline_css": {
            "type": "string",
            "x-go-name": "BodyInlineCSS"
          },
          "body_inline_js": {
            "type": "string",
            "x-go-name": "BodyInlineJS"
          },
          "button_text": {
            "type": "string",
            "x-go-name": "ButtonText"
          },
          "content_security_policy": {
            "type": "string",
            "x-go-name": "CSP"
          },
          "cors": {
            "type": "string",
            "x-go-name": "CORS"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "CreatedAt"
          },
          "failsafe_timeout_count": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "FailsafeTimeoutCount"
          },
          "failsafe_timeout_period": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "FailsafeTimeoutPeriod"
          },
          "head_file_css": {
            "type": "string",
            "x-go-name": "HeadFileCSS"
          },
          "head_file_js": {
            "type": "string",
            "x-go-name": "HeadFileJS"
          },
          "head_inline_css": {
            "type": "string",
            "x-go-name": "HeadInlineCSS"
          },
          "head_inline_js": {
            "type": "string",
            "x-go-name": "HeadInlineJS"
          },
          "id": {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "ID"
          },
          "ldap_bind_password": {
            "type": "string",
            "x-go-name": "LDAPBindPassword"
          },
          "ldap_bind_username": {
            "type": "string",
            "x-go-name": "LDAPBindUsername"
          },
          "ldap_button_text": {
            "type": "string",
            "x-go-name": "LDAPButtonText"
          },
          "ldap_enabled": {
            "type": "boolean",
            "x-go-name": "LDAPEnabled"
          },
          "ldap_skip_verify": {
            "type": "boolean",
            "x-go-name": "LDAPSkipVerify"
          },
          "ldap_start_tls": {
            "type": "boolean",
            "x-go-name": "LDAPStartTLS"
          },
          "ldap_url": {
            "type": "string",
            "x-go-name": "LDAPURL"
          },
          "logo_url": {
            "type": "string",
            "x-go-name": "LogoURL"
          },
          "min_password_duration": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "MinPasswordDuration"
          },
          "saml_button_text": {
            "type": "string",
            "x-go-name": "SAMLButtonText"
          },
          "saml_certificate_data": {
            "type": "string",
            "x-go-name": "SAMLCertificateData"
          },
          "saml_certificate_filename": {
            "type": "string",
            "x-go-name": "SAMLCertificateFilename"
          },
          "saml_enabled": {
            "type": "boolean",
            "x-go-name": "SAMLEnabled"
          },
          "saml_force_authentication": {
            "type": "boolean",
            "x-go-name": "SAMLForceAuthentication"
          },
          "saml_key_data": {
            "type": "string",
            "x-go-name": "SAMLKeyData"
          },
          "saml_key_filename": {
            "type": "string",
            "x-go-name": "SAMLKeyFilename"
          },
          "saml_metadata_url": {
            "type": "string",
            "x-go-name": "SAMLMetadataURL"
          },
          "saml_root_url": {
            "type": "string",
            "x-go-name": "SAMLRootURL"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "UpdatedAt"
          }
        }
      }
    },
    "areaConfigsResp": {
      "description": "HTTP status code 200 for retrieving area comfigs list",
      "schema": {
        "type": "object",
        "properties": {
          "collection": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/AreaConfig"
            },
            "x-go-name": "AreaConfigs"
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit"
          },
          "offset": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Offset"
          },
          "sort": {
            "type": "string",
            "x-go-name": "Sort"
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Total"
          }
        }
      }
    },
    "badRequest": {
      "description": "Error badRequest",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "description": "HTTP status code 400 - badRequest",
            "type": "integer",
            "format": "int64",
            "x-go-name": "Code"
          }
        }
      }
    },
    "empty": {
      "description": "HTTP status code 200 for empty",
      "schema": {
        "type": "object"
      }
    },
    "internal": {
      "description": "Error Interval Server",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "description": "HTTP status code 500 - Internal server error",
            "type": "integer",
            "format": "int64",
            "x-go-name": "Code"
          }
        }
      }
    },
    "loginConfigResp": {
      "description": "HTTP status code 200 for retrieving login config list",
      "schema": {
        "type": "object",
        "properties": {
          "button_text": {
            "type": "string",
            "x-go-name": "ButtonText"
          },
          "id": {
            "type": "integer",
            "format": "uint64",
            "x-go-name": "ID"
          },
          "ldap_button_text": {
            "type": "string",
            "x-go-name": "LDAPButtonText"
          },
          "ldap_enabled": {
            "type": "boolean",
            "x-go-name": "LDAPEnabled"
          },
          "saml_button_text": {
            "type": "string",
            "x-go-name": "SAMLButtonText"
          },
          "saml_enabled": {
            "type": "boolean",
            "x-go-name": "SAMLEnabled"
          }
        }
      }
    },
    "memberResp": {
      "description": "HTTP status code 200 for retrieving member list",
      "schema": {
        "type": "object",
        "properties": {
          "company": {
            "type": "string",
            "x-go-name": "Company"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Created"
          },
          "display_name": {
            "type": "string",
            "x-go-name": "DisplayName"
          },
          "email": {
            "type": "string",
            "x-go-name": "Email"
          },
          "first_name": {
            "type": "string",
            "x-go-name": "FirstName"
          },
          "id": {
            "type": "string",
            "x-go-name": "ID"
          },
          "last_name": {
            "type": "string",
            "x-go-name": "LastName"
          },
          "password": {
            "type": "string",
            "x-go-name": "Password"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Roles"
          },
          "status": {
            "type": "string",
            "x-go-name": "Status"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Updated"
          },
          "username": {
            "type": "string",
            "x-go-name": "Username"
          }
        }
      }
    },
    "membersResp": {
      "description": "HTTP status code 200 for retrieving members list",
      "schema": {
        "type": "object",
        "properties": {
          "collection": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Member"
            },
            "x-go-name": "Members"
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit"
          },
          "offset": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Offset"
          },
          "query": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "x-go-name": "Search"
          },
          "sort": {
            "type": "string",
            "x-go-name": "Sort"
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Total"
          }
        }
      }
    },
    "noContent": {
      "description": "NoContent",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "description": "HTTP status code 204 - noContent",
            "type": "integer",
            "format": "int64",
            "x-go-name": "Code"
          }
        }
      }
    },
    "notFound": {
      "description": "Error Not Found",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "description": "HTTP status code 404 - Not Found",
            "type": "integer",
            "format": "int64",
            "x-go-name": "Code"
          }
        }
      }
    },
    "success": {
      "description": "Success response",
      "schema": {
        "type": "object",
        "properties": {
          "token": {
            "description": "HTTP Status Code 200",
            "type": "string",
            "x-go-name": "Token"
          }
        }
      }
    },
    "unauthorized": {
      "description": "Error unauthorized",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "description": "HTTP status code 401 - unauthorized",
            "type": "integer",
            "format": "int64",
            "x-go-name": "Code"
          }
        }
      }
    },
    "unprocessableEntity": {
      "description": "Error Status UnprocessableEntity",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "description": "HTTP status code 422 - Unprocessable Entity error",
            "type": "integer",
            "format": "int64",
            "x-go-name": "Code"
          }
        }
      }
    },
    "userUsageReportResp": {
      "description": "HTTP status code 200 for retrieving member list",
      "schema": {
        "type": "object",
        "properties": {
          "applications": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ApplicationsUsage"
            },
            "x-go-name": "Applications"
          },
          "areas": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/AreaUsage"
            },
            "x-go-name": "Areas"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "x-go-name": "UUID"
          },
          "keys": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/PackageKeysUsage"
            },
            "x-go-name": "PackageKeys"
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/RolesUsage"
            },
            "x-go-name": "Roles"
          },
          "service_mapis": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ServiceMapisUsage"
            },
            "x-go-name": "ServiceMapis"
          },
          "usage_summary": {
            "$ref": "#/definitions/UserUsageSummary"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/UserUsage"
            },
            "x-go-name": "Users"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "api_key": []
    }
  ]
}